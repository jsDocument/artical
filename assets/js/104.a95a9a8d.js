(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{293:function(v,_,i){"use strict";i.r(_);var l=i(6),e=Object(l.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"其他"}},[v._v("其他")]),v._v(" "),i("h3",{attrs:{id:"客户端存储"}},[v._v("客户端存储")]),v._v(" "),i("ol",[i("li",[v._v("客户端存储有哪些方式\n"),i("ul",[i("li",[v._v("cookie, sessionStorage, loacalStorage 及非关系数据库")])])]),v._v(" "),i("li",[v._v("cookie, sessionStorage和localStorage的区别\n"),i("ul",[i("li",[v._v("cookie可以手动设置失效时间, 默认为会话级, cookie可以设置path、domain属性, 不同二级域名共享cookie, 存储少量数据。")]),v._v(" "),i("li",[v._v("sessionStorage的存储时长是会话级, 访问限制为文档源级别,")]),v._v(" "),i("li",[v._v("localStorage的存储时长为永久, 除非用户手动用浏览器工具删除")])])]),v._v(" "),i("li",[v._v("cookie由哪些部分组成\n"),i("ul",[i("li",[v._v("Expires 最长有效期")]),v._v(" "),i("li",[v._v("Max-Age 失效之前需要经过的秒数")]),v._v(" "),i("li",[v._v("Domain 指定cookie可以送达的主机名")]),v._v(" "),i("li",[v._v("Path 指定一个URL路径, 这个路径必须出现在要请求资源的路径中才可以发送cookie首部")]),v._v(" "),i("li",[v._v("Secure 一个带有安全属性的cookie, 请求在使用SSH和HTTPS时才会被发送到服务器")]),v._v(" "),i("li",[v._v("HttpOnly 不能通过javascript.cookie、XMLHttpRequest、Request的API进行访问")])])]),v._v(" "),i("li",[v._v("Hybrid环境下, 使用客户端存储有哪些需要注意\n"),i("ul",[i("li",[v._v("因为混合应用中的webview从一个页面跳转的另一个页面时，会话并没有像浏览器中那样是继承延续的，也就是说，当在A页面中设置的了sessionStorage值后跳转的下一个页面时，这是sessionStorage是全新的，根本获取不到A页面中设置的任何sessionStorage。")]),v._v(" "),i("li",[v._v("所以如果你们的app开发者还没有解决这个问题的话，建议这时使用session级别的cookie来代替sessionStorage，因为cookie是可以跨标签访问的，不要会话连续。")])])]),v._v(" "),i("li",[v._v("session级存储中, session cookie与sessionStorage的区别\n"),i("ul",[i("li",[v._v("sessionStorage的会话基于标签, 标签关闭则传话终止, 而cookie是基于浏览器进程; sessionStorage只能在当前标签下或当前标签下打开的标签才可以访问, 而cookie是可以跨浏览器访问的。")])])])]),v._v(" "),i("h3",{attrs:{id:"数据类型"}},[v._v("数据类型")]),v._v(" "),i("ol",[i("li",[i("p",[v._v("javascript的基础数据类型有哪些？")]),v._v(" "),i("ul",[i("li",[v._v("undefined, null, Number, String, Boolean, Symbol")])])]),v._v(" "),i("li",[i("p",[v._v("javascript的引用数据类型有哪些? 区别是？")]),v._v(" "),i("ul",[i("li",[v._v("Array, Data, String, Function, Regexp, Object")])])]),v._v(" "),i("li",[i("p",[v._v("如何判断一个变量为数组？")]),v._v(" "),i("ul",[i("li",[v._v("Object.prototype.toString.call()")]),v._v(" "),i("li",[v._v("isArray()")])])]),v._v(" "),i("li",[i("p",[v._v("undefined 与 null的区别")]),v._v(" "),i("ul",[i("li",[v._v("两个数据类型都只有一个值")]),v._v(" "),i("li",[v._v("都没有方法")]),v._v(" "),i("li",[v._v("转换为布尔值都为false")]),v._v(" "),i("li",[v._v("null是关键字, 而undefined不是")]),v._v(" "),i("li",[v._v("null是一个空对象, 进行数字类型转换时为0, typeof运算返回object")]),v._v(" "),i("li",[v._v("undefined 是一个window属性, 进行数字类型转换时为NaN, typeof运算返回undefined")])])]),v._v(" "),i("li",[i("p",[v._v("隐式类型转换, javascript底层都做了哪些?")]),v._v(" "),i("ul",[i("li",[v._v("对象转换为原始数据时, 先调用对象的valueOf方法, 如果返回结果不是原始数据类型的值, 再调用其toString方法")]),v._v(" "),i("li",[v._v("原始数据类型之间转换, 直接调用对应的构造函数进行转换")]),v._v(" "),i("li",[v._v("转换为布尔后为false的有: 0, -0, undefined, null, 空字符串, NaN")])])]),v._v(" "),i("li",[i("p",[v._v("ES6中的Symbol")]),v._v(" "),i("ul",[i("li",[v._v("是Es6新增的数据类型, 它的每个值都是唯一的, 即使两个完全相同的变量构造出来的Symbol也不相等")]),v._v(" "),i("li",[v._v("原始类型传入Symbol方法时, 会转成字符串再转成Symbol类型, 如果是对象会先调用对象的toString方法再转成成Symbol值")]),v._v(" "),i("li",[v._v("用来消除魔法字符串")])])]),v._v(" "),i("li",[i("p",[v._v("ES6中的Map 与 Set, 类数组")])]),v._v(" "),i("li",[i("p",[v._v("ES6中的iterator")])]),v._v(" "),i("li",[i("p",[v._v("async的实现")])]),v._v(" "),i("li",[i("p",[v._v("如何把字符串转换成数组？")]),v._v(" "),i("ul",[i("li",[v._v("join方法")]),v._v(" "),i("li",[v._v("Array.from(data, fn)")]),v._v(" "),i("li",[v._v("Array.prototype.slice.call")])])]),v._v(" "),i("li",[i("p",[v._v("如何把类数据转换为数组, 如argument与selector返回的DOM列表")]),v._v(" "),i("ul",[i("li",[v._v("Array.from()")]),v._v(" "),i("li",[v._v("Array.slice()")])])]),v._v(" "),i("li",[i("p",[v._v("如何判断一个变量为数组\n"),i("code",[v._v("不可用typeof, 因Array继承于Object, 所以会返回object, 亦不可用instanceOf, 因为Array实际是一个引用, 用instance方法和constructor方法都是用引用地址进行比较的方法, 在frame嵌套的情况下, 每个Array的引用地址是不同的, 比较起来结果也是不确定的")])]),v._v(" "),i("ul",[i("li",[v._v("Object.prototype.toString")]),v._v(" "),i("li",[v._v("isArray()")])])]),v._v(" "),i("li",[i("p",[v._v("改变自身的方法")]),v._v(" "),i("ul",[i("li",[v._v("copyWithin() 在数组内部将一段元素序列拷贝到另一段元素序列上, 覆盖原有的值")]),v._v(" "),i("li",[v._v("fill() 将数组中指定区间的所有元素的值, 都替换成某个固定的值")]),v._v(" "),i("li",[v._v("pop() shift() push() unshift()")]),v._v(" "),i("li",[v._v("reverse() sort() splice()")])])]),v._v(" "),i("li",[i("p",[v._v("不改变自身")]),v._v(" "),i("ul",[i("li",[v._v("concat() 返回合并后的新数组")]),v._v(" "),i("li",[v._v("includes()")]),v._v(" "),i("li",[v._v("join() 数组元素组成一个字符串")]),v._v(" "),i("li",[v._v("slice() 新数组")]),v._v(" "),i("li",[v._v("toSource() 表示当前数组字面量的字符串")]),v._v(" "),i("li",[v._v("toString() 返回一个由所有数组组合而成的字符串")]),v._v(" "),i("li",[v._v("indexOf() lastIndexOf()")])])]),v._v(" "),i("li",[i("p",[v._v("遍历")]),v._v(" "),i("ul",[i("li",[v._v("every(), some(), filter() find(), findIndex(), keys(), map() reduce(), reduceRight(), values(), forEach()")]),v._v(" "),i("li",[v._v("entries() 数组迭代器对象, 包含所有数组元素的键值对")])])]),v._v(" "),i("li",[i("p",[v._v("Array.prototype为一个长度为0的数组, flatten一个数组: Array.prototype.join; [该方法会让所有的数组元素转换成字符串, 再用分隔符将这些字符串连接起来, undefined或null会转换成空字符串]")])]),v._v(" "),i("li",[i("p",[v._v("克隆数组可以用concat() 与slice(); 数组也是Object, 直接将引用赋值给另一个变量, 会导致被赋值的变量会随着原数组的变化面变化。")])])]),v._v(" "),i("h3",{attrs:{id:"数字相关题目"}},[v._v("数字相关题目")]),v._v(" "),i("ol",[i("li",[v._v("判断一个题目为NaN？\n"),i("ul",[i("li",[v._v("先判断是否为number类型 再isNaN()")]),v._v(" "),i("li",[v._v("利用唯一一个不等于他本身的值的特性, n !== n")]),v._v(" "),i("li",[v._v("Object.is()")])])]),v._v(" "),i("li",[v._v("判断两个浮点数相等\n"),i("ul",[i("li",[v._v("计算误差范围值, Math.pow(2, -52), Es6中的Number.EPSILON")]),v._v(" "),i("li",[v._v("两个值相减, 误差小于这个范围")])])])]),v._v(" "),i("blockquote",[i("p",[v._v("Number.MAX_VALUE, Number.MIN_VALUE 最大浮点数与最小浮点数")])]),v._v(" "),i("ol",{attrs:{start:"3"}},[i("li",[v._v("检查一个数值是否为整数\n"),i("ul",[i("li",[v._v("Number.isInterger()")]),v._v(" "),i("li",[v._v("判断类型为number且对1求余等于0")])])]),v._v(" "),i("li",[v._v("当一个变量显式类型转换时, 遵循的规则是什么")]),v._v(" "),i("li",[v._v("Number([])和Number([1,2,3])的值分别是？说明其原理")]),v._v(" "),i("li",[v._v("parseInt()方法遵循的运算规则")]),v._v(" "),i("li",[v._v("对一个值进行取整的方法有多少种, 分别是？\n"),i("ul",[i("li",[v._v("parseInt")]),v._v(" "),i("li",[v._v("n|0, ~~n, n>>0 只能对32位的数字进行转换, 能处理的为2^(+/-)31的范围")]),v._v(" "),i("li",[v._v("ceil, floor, round")])])])]),v._v(" "),i("h3",{attrs:{id:"promise相关知识点"}},[v._v("Promise相关知识点")]),v._v(" "),i("ol",[i("li",[v._v("then方法的参数(fn,fn)与返回值")]),v._v(" "),i("li",[v._v("缺省返回值会认识返回的为undefined,")])]),v._v(" "),i("h3",{attrs:{id:"日期"}},[v._v("日期")]),v._v(" "),i("ol",[i("li",[v._v("date接受几种形式的参数")]),v._v(" "),i("li",[v._v("优雅的给出今天星期几\n"),i("ul",[i("li",[v._v("'日一二三四五六'.charAt(new Date().getDay())")])])]),v._v(" "),i("li",[v._v("将日期输出成指定格式")]),v._v(" "),i("li",[v._v("计算两个时间点的时间差")]),v._v(" "),i("li",[v._v("获取几天后的时间点对应的时间对象")])]),v._v(" "),i("h3",{attrs:{id:"闭包"}},[v._v("闭包")]),v._v(" "),i("ol",[i("li",[v._v("闭包是有权限访问其他函数作用域内变量的一个函数")]),v._v(" "),i("li",[v._v("JS的作用域是属于函数作用域, 而函数执行后作用域会被清理、内存也随之被回收, 由于是闭包建立在一个函数内部的子函数, 因为可以访问上级作用域的原因, 即使上级函数执行完成, 作用域内的值也不会被销毁")]),v._v(" "),i("li",[v._v("将函数的内部与外部连接起来, 因为闭包可以缓存上级作用域, 故打破了函数作用域的限制, 可以访问函数内的变量")]),v._v(" "),i("li",[v._v("闭包应用随处可见, ajax成功回调, 事件绑定的回调, setTimeout的延时回调, 一个函数内部返回一个匿名函数")])]),v._v(" "),i("h3",{attrs:{id:"前后端分离的意义"}},[v._v("前后端分离的意义")]),v._v(" "),i("ol",[i("li",[v._v("后端只需负责数据层")]),v._v(" "),i("li",[v._v("node来处理数据、路由、渲染、数据格式转换")]),v._v(" "),i("li",[v._v("提高工作效率, 前后端同步开发")])]),v._v(" "),i("h3",{attrs:{id:"页面性能优化的思路和方案"}},[v._v("页面性能优化的思路和方案")]),v._v(" "),i("ol",[i("li",[v._v("减少HTTP请求, 静态文件大小, 开启Gzip压缩, 使用CDN加速, 合适的文件缓存, 合理控制cookie大小")]),v._v(" "),i("li",[v._v("避免不必要的DOM操作与更新, 避免不必要的重排与重绘, 优化css选择器,")]),v._v(" "),i("li",[v._v("开启serviceWork提升首页速度")])]),v._v(" "),i("h3",{attrs:{id:"webpack都做了些什么"}},[v._v("webpack都做了些什么")]),v._v(" "),i("ul",[i("li",[v._v("输出md5文件名")]),v._v(" "),i("li",[v._v("增量发布")]),v._v(" "),i("li",[v._v("避免客户端、cdn缓存问题")]),v._v(" "),i("li",[v._v("提取manifest 稳定模块id")])]),v._v(" "),i("h3",{attrs:{id:"页面生成过程"}},[v._v("页面生成过程")]),v._v(" "),i("ol",[i("li",[v._v("HTML代码转化成DOM")]),v._v(" "),i("li",[v._v("CSS代码转化成CSSOM")]),v._v(" "),i("li",[v._v("结合DOM与CSSOM生成一棵渲染树")]),v._v(" "),i("li",[v._v("生成布局, 即将所有渲染树的所有节点进行平面合成")]),v._v(" "),i("li",[v._v("将布局绘制(paint)到屏幕上")])])])}),[],!1,null,null,null);_.default=e.exports}}]);