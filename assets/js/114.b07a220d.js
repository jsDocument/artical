(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{293:function(t,s,e){"use strict";e.r(s);var i=e(0),l=Object(i.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"守护进程折启动方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#守护进程折启动方法"}},[t._v("#")]),t._v(" 守护进程折启动方法")]),t._v(" "),e("h2",{attrs:{id:"前台任务：会独占命令行窗口，只有运行完了或手动终止，才能执行其他集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前台任务：会独占命令行窗口，只有运行完了或手动终止，才能执行其他集合"}},[t._v("#")]),t._v(" 前台任务：会独占命令行窗口，只有运行完了或手动终止，才能执行其他集合")]),t._v(" "),e("h2",{attrs:{id:"后台任务：在命令的尾部加上-，启动进程就会成为后台任务，ctl-z再执行bg命令，让最近一个暂停的后台任务继续执行。特点："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后台任务：在命令的尾部加上-，启动进程就会成为后台任务，ctl-z再执行bg命令，让最近一个暂停的后台任务继续执行。特点："}},[t._v("#")]),t._v(" 后台任务：在命令的尾部加上"),e("code",[t._v("&")]),t._v("，启动进程就会成为后台任务，ctl+z再执行bg命令，让最近一个暂停的后台任务继续执行。特点：")]),t._v(" "),e("ul",[e("li",[t._v("继承当前 session （对话）的标准输出（stdout）和标准错误（stderr）。因此，后台任务的所有输出依然会同步地在命令行下显示。")]),t._v(" "),e("li",[t._v("不再继承当前 session 的标准输入（stdin）。你无法向这个任务输入指令了。如果它试图读取标准输入，就会暂停执行（halt）。\n:注 本质区别是：是否继承标准输入")])]),t._v(" "),e("h2",{attrs:{id:"signup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signup"}},[t._v("#")]),t._v(" SignUp")]),t._v(" "),e("p",[t._v("前台任务：退出过程")]),t._v(" "),e("ol",[e("li",[t._v("用户准备退出 session")]),t._v(" "),e("li",[t._v("系统向该 session 发出SIGHUP信号")]),t._v(" "),e("li",[t._v("session 将SIGHUP信号发给所有子进程")]),t._v(" "),e("li",[t._v("子进程收到SIGHUP信号后，自动退出")])]),t._v(" "),e("p",[t._v("后台任务：用户退出session后，后台任务是否还会继续执行？")]),t._v(" "),e("ol",[e("li",[t._v("shopt | grep huponexit")]),t._v(" "),e("li",[t._v("执行上面的命令，就会看到huponexit参数的值。")]),t._v(" "),e("li",[t._v('大多数Linux系统，这个参数默认关闭（off）。因此，session 退出的时候，不会把SIGHUP信号发给"后台任务"。所以，一般来说，"后台任务"不会随着 session 一起退出。')])]),t._v(" "),e("h2",{attrs:{id:"disown-命令：将指定任务从后台任务列表之中移除，后台任务只要不在这个列表中，sission就不会向它发signup信号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disown-命令：将指定任务从后台任务列表之中移除，后台任务只要不在这个列表中，sission就不会向它发signup信号"}},[t._v("#")]),t._v(" disown 命令：将指定任务从后台任务列表之中移除，后台任务只要不在这个列表中，sission就不会向它发signUp信号")]),t._v(" "),e("ol",[e("li",[t._v("cmd &")]),t._v(" "),e("li",[t._v("disown")]),t._v(" "),e("li",[t._v("jobs查看进程")])]),t._v(" "),e("ul",[e("li",[t._v("disown 移出最近一个正在执行的后台任务")]),t._v(" "),e("li",[t._v("disown -r 移出所有正在执行的后台任务")]),t._v(" "),e("li",[t._v("disown -a 移出所有后台任务")]),t._v(" "),e("li",[t._v("disown -h 不移出后台任务，但是让它们不会收到SIGHUP信号")]),t._v(" "),e("li",[t._v("disown %2 / disown -h %2 根据jobId，移出指定的后台任务")])]),t._v(" "),e("h2",{attrs:{id:"nohup命令-nohup-cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nohup命令-nohup-cmd"}},[t._v("#")]),t._v(" nohup命令 nohup cmd &")]),t._v(" "),e("ul",[e("li",[t._v("阻止SIGHUP信号发到这个进程。")]),t._v(" "),e("li",[t._v("关闭标准输入。该进程不再能够接收任何输入，即使运行在前台。")]),t._v(" "),e("li",[t._v("重定向标准输出和标准错误到文件nohup.out。")])]),t._v(" "),e("p",[t._v(": 命令实际上将子进程与它所在折session分离了")]),t._v(" "),e("h2",{attrs:{id:"screen与tmux-终端复用器：在同一个终端里管理多个session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#screen与tmux-终端复用器：在同一个终端里管理多个session"}},[t._v("#")]),t._v(" screen与Tmux 终端复用器：在同一个终端里管理多个session")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("screen 新建一个session")])]),t._v(" "),e("li",[e("p",[t._v("cmd")])]),t._v(" "),e("li",[e("p",[t._v("screen -r name/pid 切回指定session")])]),t._v(" "),e("li",[e("p",[t._v("screen -ls 列出所有session")])]),t._v(" "),e("li",[e("p",[t._v("screen -S name 指定名字")])]),t._v(" "),e("li",[e("p",[t._v("tmux")])]),t._v(" "),e("li",[e("p",[t._v("cmd")])]),t._v(" "),e("li",[e("p",[t._v("tmux attach 返回正在运行的session")])]),t._v(" "),e("li",[e("p",[t._v("tmux new -s name 新建")])]),t._v(" "),e("li",[e("p",[t._v("tmux attach -t name 切换")])]),t._v(" "),e("li",[e("p",[t._v("tmux list-session 列出所有")])]),t._v(" "),e("li",[e("p",[t._v("tmux detach 退出当前session")])]),t._v(" "),e("li",[e("p",[t._v("tmux kill-session -t name")])])]),t._v(" "),e("h2",{attrs:{id:"systemd-是一组命令，涉及系统管理的方方面面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemd-是一组命令，涉及系统管理的方方面面"}},[t._v("#")]),t._v(" systemd 是一组命令，涉及系统管理的方方面面")]),t._v(" "),e("h3",{attrs:{id:"systemctl用于管理系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemctl用于管理系统"}},[t._v("#")]),t._v(" systemctl用于管理系统")]),t._v(" "),e("ul",[e("li",[t._v("systemctl --version")]),t._v(" "),e("li",[t._v("sudo systemctl reboot 重启系统")]),t._v(" "),e("li",[t._v("sudo systemctl poweroff 关闭系统，切断电源")]),t._v(" "),e("li",[t._v("sudo systemctl halt CPU停止工作")]),t._v(" "),e("li",[t._v("sudo systemctl suspend 暂停系统")]),t._v(" "),e("li",[t._v("sudo systemctl hibernate 让系统进入冬眠状态")]),t._v(" "),e("li",[t._v("sudo systemctl hybrid-sleep 让系统进入交互式休眠状态")]),t._v(" "),e("li",[t._v("sudo systemctl rescue 启动进入救援状态（单用户状态）")])]),t._v(" "),e("h3",{attrs:{id:"systemd-analyze命令用于查看启动耗时"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemd-analyze命令用于查看启动耗时"}},[t._v("#")]),t._v(" systemd-analyze命令用于查看启动耗时")]),t._v(" "),e("ul",[e("li",[t._v("systemd-analyze 查看启动耗时")]),t._v(" "),e("li",[t._v("systemd-analyze blame 查看每个服务的启动耗时")]),t._v(" "),e("li",[t._v("systemd-analyze critical-chain 显示瀑布状的启动过程流")]),t._v(" "),e("li",[t._v("systemd-analyze critical-chain atd.service 显示指定服务的启动流")])]),t._v(" "),e("h3",{attrs:{id:"hostnamectl命令用于查看当前主机的信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hostnamectl命令用于查看当前主机的信息"}},[t._v("#")]),t._v(" hostnamectl命令用于查看当前主机的信息")]),t._v(" "),e("ul",[e("li",[t._v("hostnamectl 显示当前主机的信息")]),t._v(" "),e("li",[t._v("sudo hostnamectl set-hostname rhel7 设置主机名。")])]),t._v(" "),e("h3",{attrs:{id:"localectl命令用于查看本地化设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localectl命令用于查看本地化设置"}},[t._v("#")]),t._v(" localectl命令用于查看本地化设置")]),t._v(" "),e("ul",[e("li",[t._v("localectl 查看本地化设置")]),t._v(" "),e("li",[t._v("sudo localectl set-locale LANG=en_GB.utf8 设置本地化参数。")]),t._v(" "),e("li",[t._v("sudo localectl set-keymap en_GB")])]),t._v(" "),e("h3",{attrs:{id:"timedatectl命令用于查看当前时区设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timedatectl命令用于查看当前时区设置"}},[t._v("#")]),t._v(" timedatectl命令用于查看当前时区设置")]),t._v(" "),e("ul",[e("li",[t._v("timedatectl 查看当前时区设置")]),t._v(" "),e("li",[t._v("timedatectl list-timezones 显示所有可用的时区")])]),t._v(" "),e("h3",{attrs:{id:"设置当前时区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置当前时区"}},[t._v("#")]),t._v(" 设置当前时区")]),t._v(" "),e("ul",[e("li",[t._v("sudo timedatectl set-timezone America/New_York")]),t._v(" "),e("li",[t._v("sudo timedatectl set-time YYYY-MM-DD")]),t._v(" "),e("li",[t._v("sudo timedatectl set-time HH:MM:SS")])]),t._v(" "),e("h3",{attrs:{id:"loginctl命令用于查看当前登录的用户"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loginctl命令用于查看当前登录的用户"}},[t._v("#")]),t._v(" loginctl命令用于查看当前登录的用户")]),t._v(" "),e("ul",[e("li",[t._v("loginctl list-sessions 列出当前session")]),t._v(" "),e("li",[t._v("loginctl list-users 列出当前登录用户")]),t._v(" "),e("li",[t._v("loginctl show-user ruanyf 列出显示指定用户的信息")])]),t._v(" "),e("h2",{attrs:{id:"unit：systemd管理所有系统资源，不现的资源统称为unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit：systemd管理所有系统资源，不现的资源统称为unit"}},[t._v("#")]),t._v(" Unit：Systemd管理所有系统资源，不现的资源统称为unit")]),t._v(" "),e("ul",[e("li",[t._v("Service unit：系统服务")]),t._v(" "),e("li",[t._v("Target unit：多个 Unit 构成的一个组")]),t._v(" "),e("li",[t._v("Device Unit：硬件设备")]),t._v(" "),e("li",[t._v("Mount Unit：文件系统的挂载点")]),t._v(" "),e("li",[t._v("Automount Unit：自动挂载点")]),t._v(" "),e("li",[t._v("Path Unit：文件或路径")]),t._v(" "),e("li",[t._v("Scope Unit：不是由 Systemd 启动的外部进程")]),t._v(" "),e("li",[t._v("Slice Unit：进程组")]),t._v(" "),e("li",[t._v("Snapshot Unit：Systemd 快照，可以切回某个快照")]),t._v(" "),e("li",[t._v("Socket Unit：进程间通信的 socket")]),t._v(" "),e("li",[t._v("Swap Unit：swap 文件")]),t._v(" "),e("li",[t._v("Timer Unit：定时器")])]),t._v(" "),e("h3",{attrs:{id:"systemctl-list-units命令可以查看当前系统的所有-unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemctl-list-units命令可以查看当前系统的所有-unit"}},[t._v("#")]),t._v(" systemctl list-units命令可以查看当前系统的所有 Unit")]),t._v(" "),e("ul",[e("li",[t._v("systemctl list-units 列出正在运行的 Unit")]),t._v(" "),e("li",[t._v("systemctl list-units --all 列出所有Unit，包括没有找到配置文件的或者启动失败的")]),t._v(" "),e("li",[t._v("systemctl list-units --all --state=inactive 列出所有没有运行的 Unit")]),t._v(" "),e("li",[t._v("systemctl list-units --failed 列出所有加载失败的 Unit")]),t._v(" "),e("li",[t._v("systemctl list-units --type=service 列出所有正在运行的、类型为 service 的 Unit")])]),t._v(" "),e("h3",{attrs:{id:"systemctl-status命令用于查看系统状态和单个-unit-的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemctl-status命令用于查看系统状态和单个-unit-的状态"}},[t._v("#")]),t._v(" systemctl status命令用于查看系统状态和单个 Unit 的状态")]),t._v(" "),e("ul",[e("li",[t._v("systemctl status 显示系统状态")]),t._v(" "),e("li",[t._v("sysystemctl status bluetooth.service 显示单个 Unit 的状态")]),t._v(" "),e("li",[t._v("systemctl -H root@rhel7.example.com status httpd.service 显示远程主机的某个 Unit 的状态")])]),t._v(" "),e("h3",{attrs:{id:"三个查询状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个查询状态"}},[t._v("#")]),t._v(" 三个查询状态")]),t._v(" "),e("ul",[e("li",[t._v("systemctl is-active application.service 显示某个 Unit 是否正在运行")]),t._v(" "),e("li",[t._v("systemctl is-failed application.service 显示某个 Unit 是否处于启动失败状态")]),t._v(" "),e("li",[t._v("systemctl is-enabled application.service 显示某个 Unit 服务是否建立了启动链接")])]),t._v(" "),e("h3",{attrs:{id:"unit管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit管理"}},[t._v("#")]),t._v(" Unit管理")]),t._v(" "),e("ul",[e("li",[t._v("sudo systemctl start apache.service 立即启动一个服务")]),t._v(" "),e("li",[t._v("sudo systemctl stop apache.service 立即停止一个服务")]),t._v(" "),e("li",[t._v("sudo systemctl restart apache.service 重启一个服务")]),t._v(" "),e("li",[t._v("sudo systemctl kill apache.service 杀死一个服务的所有子进程")]),t._v(" "),e("li",[t._v("sudo systemctl reload apache.service 重新加载一个服务的配置文件")]),t._v(" "),e("li",[t._v("sudo systemctl daemon-reload 重载所有修改过的配置文件")]),t._v(" "),e("li",[t._v("systemctl show httpd.service 显示某个 Unit 的所有底层参数")]),t._v(" "),e("li",[t._v("systemctl show -p CPUShares httpd.service 显示某个 Unit 的指定属性的值")]),t._v(" "),e("li",[t._v("sudo systemctl set-property httpd.service CPUShares=500 设置某个 Unit 的指定属性")])]),t._v(" "),e("h3",{attrs:{id:"unit之间的依赖关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit之间的依赖关系"}},[t._v("#")]),t._v(" Unit之间的依赖关系")]),t._v(" "),e("ul",[e("li",[t._v("systemctl list-dependencies nginx.service")]),t._v(" "),e("li",[t._v("systemctl list-dependencies --all nginx.service")])]),t._v(" "),e("h3",{attrs:{id:"配置文件：每个unit都有一个配置文件，告诉systemd怎么启动这个unit，在-etc-systemd-system-读取配置文件符号链接指向-usr-lib-systemd-system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件：每个unit都有一个配置文件，告诉systemd怎么启动这个unit，在-etc-systemd-system-读取配置文件符号链接指向-usr-lib-systemd-system"}},[t._v("#")]),t._v(" 配置文件：每个Unit都有一个配置文件，告诉Systemd怎么启动这个Unit，在/etc/systemd/system/读取配置文件符号链接指向/usr/lib/systemd/system")]),t._v(" "),e("ul",[e("li",[t._v("systemctl enable 用于两个目录之间建立符号连接")]),t._v(" "),e("li",[t._v("sudo systemctl disable clamd@scan.service 撤销符号链接")])]),t._v(" "),e("h3",{attrs:{id:"配置文件的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件的状态"}},[t._v("#")]),t._v(" 配置文件的状态")]),t._v(" "),e("ul",[e("li",[t._v("systemctl list-unit-files 列出所有配置文件")]),t._v(" "),e("li",[t._v("systemctl list-unit-files --type=service 列出指定类型的配置文件")]),t._v(" "),e("li",[t._v("systemctl status bluetooth.service 是否正在运行\nenabled：已建立启动链接\ndisabled：没建立启动链接\nstatic：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖\nmasked：该配置文件被禁止建立启动链接")])]),t._v(" "),e("h3",{attrs:{id:"配置文件修改需重新加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件修改需重新加载"}},[t._v("#")]),t._v(" 配置文件修改需重新加载")]),t._v(" "),e("ul",[e("li",[t._v("sudo systemctl daemon-reload")]),t._v(" "),e("li",[t._v("sudo systemctl restart httpd.service")])]),t._v(" "),e("h3",{attrs:{id:"配置文件的格式-systemctl-cat查看"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件的格式-systemctl-cat查看"}},[t._v("#")]),t._v(" 配置文件的格式 systemctl cat查看")]),t._v(" "),e("h3",{attrs:{id:"配置文件的区块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件的区块"}},[t._v("#")]),t._v(" 配置文件的区块")]),t._v(" "),e("p",[t._v("[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。")]),t._v(" "),e("p",[t._v("Description：简短描述\nDocumentation：文档地址\nRequires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\nWants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\nBindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\nBefore：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\nAfter：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\nConflicts：这里指定的 Unit 不能与当前 Unit 同时运行\nCondition...：当前 Unit 运行必须满足的条件，否则不会运行\nAssert...：当前 Unit 运行必须满足的条件，否则会报启动失败\n[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。")]),t._v(" "),e("p",[t._v("WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\nRequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\nAlias：当前 Unit 可用于启动的别名\nAlso：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。")]),t._v(" "),e("p",[t._v("Type：定义启动时的进程行为。它有以下几种值。\nType=simple：默认值，执行ExecStart指定的命令，启动主进程\nType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\nType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\nType=dbus：当前服务通过D-Bus启动\nType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\nType=idle：若有其他任务执行完毕，当前服务才会运行\nExecStart：启动当前服务的命令\nExecStartPre：启动当前服务之前执行的命令\nExecStartPost：启动当前服务之后执行的命令\nExecReload：重启当前服务时执行的命令\nExecStop：停止当前服务时执行的命令\nExecStopPost：停止当其服务之后执行的命令\nRestartSec：自动重启当前服务间隔的秒数\nRestart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\nTimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\nEnvironment：指定环境变量")]),t._v(" "),e("h2",{attrs:{id:"target-是一个unit组，包含许多相关的unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#target-是一个unit组，包含许多相关的unit"}},[t._v("#")]),t._v(" Target 是一个unit组，包含许多相关的unit")]),t._v(" "),e("ul",[e("li",[t._v("systemctl list-unit-files --type=target 查看当前系统的所有 Target")]),t._v(" "),e("li",[t._v("systemctl list-dependencies multi-user.target 查看一个 Target 包含的所有 Unit")]),t._v(" "),e("li",[t._v("systemctl get-default 查看启动时的默认 Target")]),t._v(" "),e("li",[t._v("sudo systemctl set-default multi-user.target 设置启动时的默认 Target")]),t._v(" "),e("li",[t._v("sudo systemctl isolate multi-user.target 切换 Target 时，默认不关闭前一个 Target 启动的进程， systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程")])]),t._v(" "),e("p",[t._v(": 与init进程的主要差别：1.默认在/etc/inittab文件设置，现在被target位置在/etc/systemd/system/default.target取代。 2. 启动脚本位置之前在/etc/init.d现在存放在/lib/systemd/system和/etc/systemd/system目录。3.配置文件的位置")]),t._v(" "),e("h2",{attrs:{id:"日志管理journalctl，查看所有日志，配置文件在-etc-systemd-jourrnald-conf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志管理journalctl，查看所有日志，配置文件在-etc-systemd-jourrnald-conf"}},[t._v("#")]),t._v(" 日志管理journalctl，查看所有日志，配置文件在/etc/systemd/jourrnald.conf")]),t._v(" "),e("ul",[e("li",[t._v("sudo journalctl 查看所有日志（默认情况下 ，只保存本次启动的日志）")]),t._v(" "),e("li",[t._v("sudo journalctl -k 查看内核日志（不显示应用日志）")]),t._v(" "),e("li",[t._v("查看系统本次启动的日志\nsudo journalctl -b\nsudo journalctl -b -0")]),t._v(" "),e("li",[t._v("sudo journalctl -b -1 查看上一次启动的日志（需更改设置）")]),t._v(" "),e("li",[t._v('查看指定时间的日志\nsudo journalctl --since="2012-10-30 18:17:16"\nsudo journalctl --since "20 min ago"\nsudo journalctl --since yesterday\nsudo journalctl --since "2015-01-10" --until "2015-01-11 03:00"\nsudo journalctl --since 09:00 --until "1 hour ago"')]),t._v(" "),e("li",[t._v("sudo journalctl -n 显示尾部的最新10行日志")]),t._v(" "),e("li",[t._v("sudo journalctl -n 20 显示尾部指定行数的日志")]),t._v(" "),e("li",[t._v("sudo journalctl -f 实时滚动显示最新日志")]),t._v(" "),e("li",[t._v("sudo journalctl /usr/lib/systemd/systemd 查看指定服务的日志")]),t._v(" "),e("li",[t._v("sudo journalctl _PID=1 查看指定进程的日志")]),t._v(" "),e("li",[t._v("sudo journalctl /usr/bin/bash 查看某个路径的脚本的日志")]),t._v(" "),e("li",[t._v("sudo journalctl _UID=33 --since today 查看指定用户的日志")]),t._v(" "),e("li",[t._v("查看某个 Unit 的日志\nsudo journalctl -u nginx.service\nsudo journalctl -u nginx.service --since today")]),t._v(" "),e("li",[t._v("sudo journalctl -u nginx.service -f 实时滚动显示某个 Unit 的最新日志")]),t._v(" "),e("li",[t._v("journalctl -u nginx.service -u php-fpm.service --since today 合并显示多个 Unit 的日志")])]),t._v(" "),e("h3",{attrs:{id:"查看指定优先级（及其以上级别）的日志，共有8级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看指定优先级（及其以上级别）的日志，共有8级"}},[t._v("#")]),t._v(" 查看指定优先级（及其以上级别）的日志，共有8级")]),t._v(" "),e("ul",[e("li",[t._v("0: emerg")]),t._v(" "),e("li",[t._v("1: alert")]),t._v(" "),e("li",[t._v("2: crit")]),t._v(" "),e("li",[t._v("3: err")]),t._v(" "),e("li",[t._v("4: warning")]),t._v(" "),e("li",[t._v("5: notice")]),t._v(" "),e("li",[t._v("6: info")]),t._v(" "),e("li",[t._v("7: debug\nsudo journalctl -p err -b")]),t._v(" "),e("li",[t._v("sudo journalctl --no-pager 日志默认分页输出，--no-pager 改为正常的标准输出")]),t._v(" "),e("li",[t._v("sudo journalctl -b -u nginx.service -o json 以 JSON 格式（单行）输出")]),t._v(" "),e("li",[t._v("sudo journalctl -b -u nginx.serviceqq -o json-pretty 以 JSON 格式（多行）输出，可读性更好")]),t._v(" "),e("li",[t._v("sudo journalctl --disk-usage 显示日志占据的硬盘空间")]),t._v(" "),e("li",[t._v("sudo journalctl --vacuum-size=1G 指定日志文件占据的最大空间")]),t._v(" "),e("li",[t._v("sudo journalctl --vacuum-time=1years 指定日志文件保存多久")])])])}],!1,null,null,null);s.default=l.exports}}]);