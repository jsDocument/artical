(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{228:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"作用域、闭包、作用域提升、执行上下文、垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域、闭包、作用域提升、执行上下文、垃圾回收"}},[t._v("#")]),t._v(" 作用域、闭包、作用域提升、执行上下文、垃圾回收")]),t._v(" "),a("h4",{attrs:{id:"编译的三个步骤-javascript-是执行前进行编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译的三个步骤-javascript-是执行前进行编译"}},[t._v("#")]),t._v(" 编译的三个步骤-----Javascript 是执行前进行编译")]),t._v(" "),a("ul",[a("li",[t._v("词法分析-----词法单元 token")]),t._v(" "),a("li",[t._v("预发解析-----转换成抽象语法树 AST")]),t._v(" "),a("li",[t._v("代码生成")]),t._v(" "),a("li",[t._v("角色：\n引擎----负责整个 Javascript 程序的编译和执行过程；统筹工作\n编译器----负责语法分析和代码生成等；分析和生成工作\n作用域----负责收集并维护所有声明的标识符组成的一系列查询，有一套非常严格的规则，确定当"),a("code",[t._v("前代码对标识符的访问权限")]),t._v(";")]),t._v(" "),a("li",[t._v("声明过程：编译器询问作用域是否有一个该名称的的变量存在于"),a("code",[t._v("同一个作用域的集合中")]),t._v("，存在则忽略继续进行编译，否则要求作用域在当前作用域集合声明一个新的变量")]),t._v(" "),a("li",[t._v("赋值过程：编译器生成所需要的代码，引擎运行时，会询问作用域是否存在该变量，如果存在就使用该变量，否则向上查找")]),t._v(" "),a("li",[t._v("RHS：取到它的源值；如 console.log(a) 只是查找并取得 a 的值（是几---获取变量的值）\nLHS：试图找到变量的容器本身；如 a = 2，不关心当前值，只是找赋值操作的目标（给谁---目标赋值）")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h4",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("ul",[a("li",[t._v("作用域嵌套形成作用域链「遮蔽效应」")]),t._v(" "),a("li",[t._v("区分 RHS与 LHS 的原因\n"),a("ul",[a("li",[t._v("RHS 查不到时引擎会抛出异常：ReferenceError")]),t._v(" "),a("li",[t._v("LHS 查找不到会创建一个具有该名称的变量「非严格模式」")]),t._v(" "),a("li",[t._v("TypeError 是作用域判别成功，但操作不合理")])])]),t._v(" "),a("li",[t._v("欺骗词法作用域：在运行时修改或创建新的作用域\n"),a("ul",[a("li",[t._v("eval：用于程序生成代码并运行，好像代码是写在那个位置一样，严格模式下 eval 运行有其自己的词法作用域，意味着其中的声明无法修改所在的作用域，setTimeout，setInterval，还有new Function( params, body)；")]),t._v(" "),a("li",[t._v("with 重复引用一个对象的多个属性的的快捷方式，实际是根据传递给with 的对象，"),a("code",[t._v("凭空创建了一个全新的词法作用域")])]),t._v(" "),a("li",[t._v("引擎无法在编译时对作用域查找进行优化，优化对这些是无用的。")])])])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//LHS")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行这行时，会创建一个全局的 a = 2，在该对象作用域查找 a，未找到，会进行正常的词法作用域查找")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[t._v("立即执行函数表达式，匿名与具名函数，可以从调试调用栈、调用自身、可读性考虑")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 功能一样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将第二段定义的 def 当做参数传递给第一段代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IIFE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("def")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("def")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"作用域提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域提升"}},[t._v("#")]),t._v(" 作用域提升")]),t._v(" "),a("ul",[a("li",[t._v("编译器先收集所有声明，并用合适的作用域把它们关联起来，声明是编译阶段，赋值是执行阶段")]),t._v(" "),a("li",[t._v("词法作用域")]),t._v(" "),a("li",[t._v("块级作用域 try{}catch(){}性能问题，函数进行包裹其中的 this, return, break, continue 就会发生改变")]),t._v(" "),a("li",[t._v("函数的提升----函数的隐含值；函数表达式不会提升")]),t._v(" "),a("li",[t._v("函数会首先被提升，然后才是变量")])]),t._v(" "),a("h4",{attrs:{id:"什么是闭包？实际应用场景？如何产生的？变量如何被回收？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包？实际应用场景？如何产生的？变量如何被回收？"}},[t._v("#")]),t._v(" 什么是闭包？实际应用场景？如何产生的？变量如何被回收？")]),t._v(" "),a("ul",[a("li",[t._v("函数在定义时的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域，无论是任何手段将内部函数传递到词法作用域以外，就会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。")]),t._v(" "),a("li",[t._v("循环中的函数是在各个迭代中分别定义的，被封闭在一个共享作用域中，只有一个 i")]),t._v(" "),a("li",[t._v("模块的实现")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" baz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baz")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 循环创建了 5 次宏任务，执行宏任务时，循环已结束，执行输出最终 i 的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以加自己变量的封闭的作用域")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for循环头部的 let 声明在循环过程中会不止一次被声明，随后的每个迭代使用上一个迭代结束的值初始化这个变量*****")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("h4",{attrs:{id:"动态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态作用域"}},[t._v("#")]),t._v(" 动态作用域")]),t._v(" "),a("ul",[a("li",[t._v("动态作用域：运行时动态决定，不关心函数和作用域是如何声明及在何处声明的，只关心在何处调用的；")]),t._v(" "),a("li",[t._v("箭头函数的 this，只是用词法作用域覆盖了 this 本来的值")]),t._v(" "),a("li",[t._v('this：隐式"传递"一个对象引用')]),t._v(" "),a("li",[t._v("this绑定规则：\n"),a("ul",[a("li",[t._v("默认规则----独立函数调用，取决于调用位置，严格模式下 this绑定为 undefined，否则为 window")]),t._v(" "),a("li",[t._v("隐式绑定----函数的声明方式，如对象的属性，属于对象？对象.属性()调用，隐式绑定会把this 绑定到这个上下文对象，最有最后一层在调用位置中起作用；----隐式丢失")]),t._v(" "),a("li",[t._v("显示绑定----装箱")]),t._v(" "),a("li",[t._v("new 绑定")])])]),t._v(" "),a("li",[t._v("一个函数被调用时，会创建一个活动记录(执行上下文)，记录在哪里被调用、调用方式、参数信息、this，这个执行上下文会在执行的过程中用到")])]),t._v(" "),a("h4",{attrs:{id:"js-的执行上下文？？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-的执行上下文？？"}},[t._v("#")]),t._v(" JS 的执行上下文？？")]),t._v(" "),a("ul",[a("li",[t._v("JS 运行需要一个运行环境，这个环境就是执行上下文，JS 的预编译就是在这个环境中")]),t._v(" "),a("li",[t._v("分为：全局、函数、eval 执行上下文")]),t._v(" "),a("li",[t._v("分为：\n"),a("ul",[a("li",[t._v("创建阶段：创建词法环境、生成变量对象、建立作用域链，全都 this 指向，并绑定 this")]),t._v(" "),a("li",[t._v("执行阶段：变量赋值、函数引用及执行代码")])])]),t._v(" "),a("li",[t._v("预编译也称为执行期上下文：\n"),a("ul",[a("li",[t._v("创建 AO 对象")]),t._v(" "),a("li",[t._v("找形参和变量声明，将变量和形参作为 AO 属性名，值为 "),a("code",[t._v("undefined")])]),t._v(" "),a("li",[t._v("将形参和实参想统一")]),t._v(" "),a("li",[t._v("在函数体内找到函数生命，值赋予函数体。最后程序输出变量值的时候，就是从 AO对象中拿")])])]),t._v(" "),a("li",[t._v("变量对象 AO，用来存放当前执行环境中的变量")]),t._v(" "),a("li",[t._v("变量对象 AO的创建过程-----变量提升\n"),a("ul",[a("li",[t._v("创建 arguments 对象，将参数名和 undefined 组成键值对")]),t._v(" "),a("li",[t._v("遇到同名函数时，后面的会覆盖前面的")]),t._v(" "),a("li",[t._v("检查当前环境中的变量并赋值为 undefined，遇到同名的函数声明，为了避免函数被赋值为 undefined，会忽略此声明")])])]),t._v(" "),a("li",[t._v("变量对象 AO 变为活动对象-----执行阶段：变量赋值、函数引用应执行代码")])]),t._v(" "),a("h4",{attrs:{id:"javascript-垃圾回收：原始数据类型存于栈中，引用数据类型存于堆中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-垃圾回收：原始数据类型存于栈中，引用数据类型存于堆中"}},[t._v("#")]),t._v(" javascript 垃圾回收：原始数据类型存于栈中，引用数据类型存于堆中")]),t._v(" "),a("ul",[a("li",[t._v("ESP：扩展栈指针寄存器，"),a("code",[t._v("用于存放函数栈顶指针")])]),t._v(" "),a("li",[t._v("javascript 函数执行时，将其上下文压入栈中，ESP 上移")]),t._v(" "),a("li",[t._v("函数执行完成，ESP 下移到下一个函数执行上下文即可，当下一个函数入栈时，会将 ESP 以上的空间直接覆盖掉----通过下移 ESP 来完成栈的垃圾回收")]),t._v(" "),a("li",[t._v("堆中垃圾回收：\n"),a("ul",[a("li",[t._v("新生代：存放生命时间短的对象，小对象一般会到该区域，回收频繁，使用复制算法，因为复制和清理成本高，所以该空间比较小")]),t._v(" "),a("li",[t._v("老生代：存放生命时间长和大的对象，新生代中经过两次垃圾回收仍然是活动对象的，会"),a("code",[t._v("晋升为到该空间")]),t._v("，使用标记-压缩算法")]),t._v(" "),a("li",[t._v("因为 javascript 是单线程，所以垃圾回收算好和脚本在同一线程内执行，为了避免垃圾回收影响应用的性能，V8 将标记过程拆分成多个子标记，让垃圾回收和应用交通进行")]),t._v(" "),a("li",[t._v("标记清除法：\n"),a("ul",[a("li",[t._v("标记内存空间中的"),a("code",[t._v("活动对象")]),t._v("与"),a("code",[t._v("非活动对象")])]),t._v(" "),a("li",[t._v("删除非活动对象，释放内存空间")]),t._v(" "),a("li",[t._v("整理内存空间，避免频繁回收造成大量内存碎片")])])]),t._v(" "),a("li",[t._v("复制算法：\n"),a("ul",[a("li",[t._v("空间平均分成 from 和 to 两部分")]),t._v(" "),a("li",[t._v("先在 from 空间进行内存分配，当空间被占满，标记活动对象，将其复制到 to 空间")]),t._v(" "),a("li",[t._v("复制完成后，将 from 和 to 空间互换")])])]),t._v(" "),a("li",[t._v("引用计数\n"),a("ul",[a("li",[t._v("实时统计指向对象的引用数")]),t._v(" "),a("li",[t._v("当引用数为 0时，实时回收对象-----存在循环引用数，对象不会被回收")])])]),t._v(" "),a("li",[t._v("标记-压缩算法：标记，活动对象移到内存的一端，集中到一起，清理掉边界以外的内存，释放连续空间")])])])]),t._v(" "),a("p",[t._v(":::\n容易造成内存泄漏的情况？node 端造成内存泄漏的情况？垃圾回收机制？\n:::")])])}],!1,null,null,null);s.default=e.exports}}]);