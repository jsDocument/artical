(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{390:function(e,t,i){"use strict";i.r(t);var l=i(0),r=Object(l.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[i("h4",{attrs:{id:"工厂"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#工厂"}},[e._v("#")]),e._v(" 工厂")]),e._v(" "),i("h5",{attrs:{id:"fragmentfactory-vm-el-根据vm与el编译-得到linker"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#fragmentfactory-vm-el-根据vm与el编译-得到linker"}},[e._v("#")]),e._v(" FragmentFactory(vm, el) 根据vm与el编译, 得到linker")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("更新this.vm = vm")])]),e._v(" "),i("li",[i("p",[e._v("el为字符串, 或 tempalte标签, template = parseTemplate(el, true)")])]),e._v(" "),i("li",[i("p",[e._v("否则template为创建文档片断, 将el追加到template")])]),e._v(" "),i("li",[i("p",[e._v("this.template = template")])]),e._v(" "),i("li",[i("p",[e._v("linker = compile(template, vm.$options, true)")])]),e._v(" "),i("li",[i("p",[e._v("this.linker = linker")])]),e._v(" "),i("li",[i("p",[e._v("create(host, scope, parentFrag) 创建fragment实例")]),e._v(" "),i("ol",[i("li",[e._v("frag为this.template的副本")]),e._v(" "),i("li",[e._v("返回 new Fragment(this.linker, this.vm, frag, host, scope, parentFrag)")])])])]),e._v(" "),i("h5",{attrs:{id:"fragment-linker-vm-frag-host-scope-parentfrag-调用linker-进行数据监听"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#fragment-linker-vm-frag-host-scope-parentfrag-调用linker-进行数据监听"}},[e._v("#")]),e._v(" Fragment(linker, vm, frag, host, scope, parentFrag)  调用linker, 进行数据监听")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("this.inserted frag是否在文档中")])]),e._v(" "),i("li",[i("p",[e._v("更新this到parentFrag.childFrags队列")])]),e._v(" "),i("li",[i("p",[e._v("frag.childNodes长度为1 且其第一个子节点为__vue_anchor, 更新 "),i("strong",[e._v("this.node = frag.childNodes[0], this.before = singleBefore, this.remove = singleRemove")])])]),e._v(" "),i("li",[i("p",[e._v("否则 this.node = 创建的fragment-start的注释节点, this.end = 创建的fragment-end的注释节点; "),i("strong",[e._v("this.frag = frag")]),e._v("; this.node添加到frag第一个子元素, this.end追加到frag, this.before = mutiBefore, this.remove = mutiRemove")])]),e._v(" "),i("li",[i("p",[e._v("this.node._"),i("em",[e._v("vfrag")]),e._v("_ 指向当前实例this")])]),e._v(" "),i("li",[i("p",[e._v("callHook 为循环this.childFrag, 执行其钩子函数, 循环其this.children执行其钩子")])]),e._v(" "),i("li",[i("p",[e._v("singleBefore(target, withTransition)")]),e._v(" "),i("ol",[i("li",[e._v("this.inserted = true")]),e._v(" "),i("li",[e._v("(以动画方式)添加target到this.node前")]),e._v(" "),i("li",[e._v("如果this.node已经在文档中, 则执行attach钩子, !child._isAttached时, 执行child的attached钩子")])])]),e._v(" "),i("li",[i("p",[e._v("singleRemove")]),e._v(" "),i("ol",[i("li",[e._v("this.inserted = false")]),e._v(" "),i("li",[e._v("判断this.node在文档中 shouldCallRemove,")]),e._v(" "),i("li",[e._v("执行this.beforeRemove()")]),e._v(" "),i("li",[e._v("移除DOM之后的回调执行: 如果shouldCallRemove 则触发detach钩子, 执行self.destory()")])])]),e._v(" "),i("li",[i("p",[e._v("beforeRemove")]),e._v(" "),i("ol",[i("li",[e._v("循环this.childFrag进行beforeRemove(false)")]),e._v(" "),i("li",[e._v("循环this.children进行$destory(false, true)")]),e._v(" "),i("li",[e._v("循环this.unlink.dirs 进行监听订阅取消")])])]),e._v(" "),i("li",[i("p",[e._v("destory")]),e._v(" "),i("ol",[i("li",[e._v("移除this.parentFrag.childFrags当中的当前实例")]),e._v(" "),i("li",[e._v("this.node__vfrag__ = null")]),e._v(" "),i("li",[e._v("this.unlink()")])])]),e._v(" "),i("li",[i("p",[e._v("multiBefore DOM操作处理一个范围, 其他与singleBefore相同")])]),e._v(" "),i("li",[i("p",[e._v("multiRemove DOM操作处理一个范围, 其他与singleRemove相同")])])])])}],!1,null,null,null);t.default=r.exports}}]);