(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{229:function(e,i,v){"use strict";v.r(i);var l=v(0),_=Object(l.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,i=e.$createElement,v=e._self._c||i;return v("div",{staticClass:"content"},[v("p",[e._v("如何判断 webview 是否加载完成？")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("webview.isLoading？")])]),e._v(" "),v("li",[v("p",[e._v("uninitialized : 还没开始加载")])]),e._v(" "),v("li",[v("p",[e._v("loading : 加载中")])]),e._v(" "),v("li",[v("p",[e._v("loaded : 加载完成")])]),e._v(" "),v("li",[v("p",[e._v("interactive : 结束渲染，用户已经可以与网页进行交互。但内嵌资源还在加载中")])]),e._v(" "),v("li",[v("p",[e._v("complete : 完全加载完成")])]),e._v(" "),v("li",[v("p",[e._v("JS 事件失效处理-----事件委托")])]),e._v(" "),v("li",[v("p",[e._v("webpack Plugin 原理")])]),e._v(" "),v("li",[v("p",[e._v("先渲染 react 的一部分")]),e._v(" "),v("ul",[v("li",[e._v("suspense--fallback 和 React.lazy 懒加载组件 + import()")]),e._v(" "),v("li",[e._v("ErrorBoundary")]),e._v(" "),v("li",[e._v("COncurrent UI Patterns：当用户按下另一个按键时，React 不需要阻塞浏览器更新文本输入。相反，它可以让浏览器绘制输入的更新，然后 在内存中 渲染更新后的列表。当渲染完成后，React 更新 DOM，并且变化会反映在屏幕上。")])])])]),e._v(" "),v("p",[e._v("如何实现错误上报？")]),e._v(" "),v("ul",[v("li",[e._v("unhandledrejection事件: 当Promise 被 reject 且没有 reject 处理器的时候")]),e._v(" "),v("li",[e._v("onerror：运行时错误")]),e._v(" "),v("li",[e._v("error：监听资源类错误")])])])}],!1,null,null,null);i.default=_.exports}}]);