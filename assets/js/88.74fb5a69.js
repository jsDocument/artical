(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{270:function(e,t,a){"use strict";a.r(t);var s=a(0),i=Object(s.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"event-loop-与-宏任务-与-微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-与-宏任务-与-微任务"}},[e._v("#")]),e._v(" event loop 与 宏任务 与 微任务")]),e._v(" "),a("h4",{attrs:{id:"浏览器运行有两种模式，同步模式与异步模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器运行有两种模式，同步模式与异步模式"}},[e._v("#")]),e._v(" 浏览器运行有两种模式，同步模式与异步模式")]),e._v(" "),a("h4",{attrs:{id:"异步模式分为：宏任务与微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步模式分为：宏任务与微任务"}},[e._v("#")]),e._v(" 异步模式分为：宏任务与微任务")]),e._v(" "),a("ul",[a("li",[e._v("浏览器的宏任务：宏任务中可能会执行的代码包括“脚本 (script)”“模块（module）”和“函数体（function body）”\n"),a("ul",[a("li",[e._v("函数体其实也是一个语句的列表，函数体中的语句列表中多了 return 语句可以用")])])]),e._v(" "),a("li",[e._v("宏任务Task，由浏览器或 Node 发起，包括：setTimeout, setInterval, MessageChannel, I/O 事件队列，setImmediate(Node 环境), Script 整体代码块")]),e._v(" "),a("li",[e._v("微任务 Jobs，有 JS 自身发起，包括：requestAnimationFrame, "),a("code",[e._v("MutationObserver(浏览器环境)")]),e._v(", Promise.[then, catch, finally], "),a("code",[e._v("process.nextTick(Node 环境)")]),e._v(", "),a("code",[e._v("queueMicrotask")])]),e._v(" "),a("li",[e._v("requestAnimationFrame 会在下一次重绘之前执行")]),e._v(" "),a("li",[e._v("假设有两个代码块：执行第一个代码块的同步代码，创建并排入了微任务、宏任务队列----\x3e同步代码执行完成-----\x3e清空其微任务队列")])]),e._v(" "),a("h4",{attrs:{id:"nodejs-事件循环-来自-libuv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-事件循环-来自-libuv"}},[e._v("#")]),e._v(" nodeJS 事件循环---来自 libuv")]),e._v(" "),a("ul",[a("li",[e._v("事件驱动的异步 IO模型而设计：")]),e._v(" "),a("li",[e._v("timers")]),e._v(" "),a("li",[e._v("pending callbacks")]),e._v(" "),a("li",[e._v("idle, prepare")]),e._v(" "),a("li",[e._v("poll")]),e._v(" "),a("li",[e._v("check")]),e._v(" "),a("li",[e._v("close callbacks")])])])}],!1,null,null,null);t.default=i.exports}}]);