(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{202:function(n,i,t){"use strict";t.r(i);var e=t(0),l=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,i=n.$createElement,t=n._self._c||i;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"排序算法"}},[n._v("排序算法")]),t("h2",{attrs:{id:"插入排序"}},[n._v("插入排序")]),t("ol",[t("li",[n._v("直接插入")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("void insertSort(int *R, int n){\n  int i, j, temp;\n  for(i = 1; i<n; i++){\n    if(R[i]<R[i-1]){\n      temp = R[i];\n      // 将temp插入到队列的i-1之前, 即之前排好序的队列中\n      for(j = i-1; temp < R[j] && j>=0 ; j--){\n        R[j+1] = R[j];\n      }\n      R[j+1] = temp;\n    }\n  }\n}\n")])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("希尔排序即『缩小增量排序』，把数组R元素分成d1(增量)个组，所有下标距离为d1的倍数的元素，即[1],[1+d1],[1+2d1]...为一组，[2],[2+d1],[2+2d1]...为一组，在各组内进行插入排序。然后再取第二个增量d2(d2<d1)，重复上述分组与排序，走到所取增量等于1；把所有元素放入到一组中进行直接插入排序。(如何选择增量值：最后增量必须为1，尽量避免增量之间互为位数)")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("void shellInsert(int *R, int d, int n){\n  int i, j, temp;\n  for(i=d + 1; i <= n; i++){\n    // i的值 小于 i-d的值时，开始进行该组的循环比较\n    if(R[i]<R[i-d]){\n      temp = R[i];\n      j = i - d;\n      // 一组当中第2个及其后元素的比较\n      while(j>0 && temp<R[j]){\n        R[j+d] = R[j];\n        j = j-d;\n      }\n      R[j+d] = temp;\n    }\n  }\n}\n// 按增量序列d[0..t-1]对R进行希尔排序\nvoid shellSort(int *R, int d[], int t, int n){\n\n}\n")])]),t("h2",{attrs:{id:"交换排序"}},[n._v("交换排序")]),t("ol",[t("li",[n._v("冒泡排序：依次将相邻元素进行比较和交换")]),t("li",[n._v("双向冒泡：交替改变扫描方向")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// i的取值？\nvoid DbubbleSort(int *R, int n){\n  int noSwap = 1, temp;\n  int i = 1, j;\n  while(noSwap){\n    noSwap = 0;\n    for(j = n-i; j>= i; j--){  // 从后向前扫描 [n-i...i]\n      if(R[j]<R[j-1]){\n        temp = R[j];\n        R[j] = R[j-1];\n        R[j-1] = temp;\n        noSwap = 1;\n      }\n    }\n    for(j=i+1; j< n-i; j++){ // 从前向后扫描\n      if(R[j]>R[j+1]){\n\n      }\n    }\n    i = i+1;\n  }\n}\n")])]),t("ol",{attrs:{start:"3"}},[t("li",[n._v("快速排序：划分交换排序，是对冒泡排序的一种改进，冒泡是相邻节点的比较与交换，但该排序的比较和交换是从两端向中间进行。")])]),t("ul",[t("li",[n._v("无序区，较小无序区[low...i-1]和[i+1...high]")]),t("li",[n._v("基准")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("void Partition(int *R, int low, int high){\n  int i,j;\n  i = low;\n  j = high;\n  temp = R[i];\n  while(i<j){\n    while(temp <= R[j]){\n      j--;\n    }\n    if(i<j){\n      R[i] = R[j];\n      i++;\n    }\n    while(temp>=R[i]){\n      i++;\n    }\n    if(i<j){\n      R[j] = R[i];\n      j--;\n    }\n  }\n  R[i] = temp;\n  return i;\n}\n\nvoid quickSort(int *R, int low, int high){\n  int p;\n  if(low < high){\n    p = Partition(R, low, hight);\n    quickSort(R, low, p-1);\n    quickSort(R, p+1, high);\n  }\n}\n\n")])]),t("h2",{attrs:{id:"选择排序"}},[n._v("选择排序")]),t("ol",[t("li",[t("p",[n._v("直接选择：每次从待排序的无序区中选择最小/大的，与R[0],R[1]依次交换。")])]),t("li",[t("p",[n._v("堆排序：如何建堆是关键，父节点R[i/2]，左子节点[2i]，右子节点[2i+1]，找出子节点中较大的那个和父节点比较，如果大于父节点则进行交换，再继续将该子节点作为父节点，与其子节点再进行比较。")])])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/**\n* R  数组列表\n* i  根节点位置\n* n  列表长度\n*** 下标为0不可用\n**/\nvoid shift(int *R, int i, int n){\n  int j;\n  int temp = R[i];\n  j = i*2;\n  while(j<=n){\n    if(j<h && R[j]<R[j+1]){\n      j++;  // 右子节点大，则取右子节点与父节点进行比较\n    }\n    if(temp>=R[j]){\n      break;\n    }\n    R[i] = R[j];\n    i = j;  // 选取子节点作为父节点进行再与其子节点进行比较\n    j = 2*i;\n  }\n  R[i] = temp;\n}\nvoid heapSort(int *R, int n){\n  int i, temp;\n  //  建大根堆\n  for(i = n/2; i>0; i--){\n    shift(R, i, n);\n  }\n  // 堆排序，将第一个最大与最后一项交换，此时只有最一后项是有序区，其他项为无序区，因为无序区的7个关键字不为堆，需要调整其为堆\n  for(i = n; i>1; i--){\n    //  交换第一位与最后一位\n    temp = R[1];\n    R[1] = R[i];\n    R[i] = temp;   // 将排序好的放到最后，有序区\n    shift(R, 1, i-1);  // 不包含排好序的，堆排序；每次将建好堆的根节点放入到有序区\n  }\n}\n\n\n")])]),t("h2",{attrs:{id:"归并排序"}},[n._v("归并排序")]),t("p",[n._v("待排序看成n个长度为1的子元素，把子元素两两归并，有「n/2」个长度为2的有序组，再把「n/2」个有序组再两两归并，如此反复，直到归并得到一个长度为n的有序组为止，其为二路归并排序；可以用于对两个有序的序列进行合并。")]),t("ul",[t("li",[n._v("长度为奇数，则最后一组子元素的长度可能小于。。，最后一个子元素无需和其他子元素归并")]),t("li",[n._v("长度为偶数，则要对最后一对子元素中后一个子元素的区间上界为n？")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 对R[low...m] 和 R[m+1...high]归并为有序的 N[low...high]\nvoid Merge(int *R, int *N, int low, int m, int high){\n  int i, j, k;\n  i = low;\n  j = m+1;\n  k = low;\n  while(i<=m && j<=high){\n    if(R[i]<R[j]){\n      N[k++] = R[i++];\n    }else{\n      N[k++] = R[j++];\n    }\n    // 如果两个有序区长度不一样，将剩余项合并进来\n    while(i<=m){\n      N[k++] = R[i++];\n    }\n    while(j<=high){\n      N[k++] = R[j++];\n    }\n  }\n}\n\nvoid mergePass(int *R, int *N, int len, int n){\n  int i, j;\n  // 将两组合并后，N更新了2*len的元素\n  for(i = 1; i+2*len-1<n; i = i+2*len){\n    merge(R, N, i, i+len-1, i+2*len-1);\n  }\n  // 尚有文件未合并\n  if(i+len-1<n){\n    merge(R, N, i, i+len-1, n);\n  }else{ // 元素个数为奇数个，将剩余子元素复制到N中\n    for(j = i; j<=n; j++){\n      N[j] = R[j];\n    }\n  }\n}\n\nvoid mergeSort(int *R, int *N, int n){\n  int len = 1;\n  while(len<n){\n    // len为合并的有序组长度\n    mergePass(R, N, len, n)\n    len = len *2;\n  }\n}\n\n")])]),t("h2",{attrs:{id:"分配排序把"}},[n._v("分配排序把")]),t("ol",[t("li",[n._v("箱排序：设置若干个箱子，依次扫描数组项，把等于k的记录全部装入到第k个箱子里，然后按序号依次将各非空箱子首尾连接起来。")])]),t("ul",[t("li",[n._v("循环序列，等于i的，存入到R[i]的链队列中，R[i].f，R[i].r")])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("基数排序：对箱排序的改进和推广，因箱排序只适用于取值范围较小的情况，否则所需箱子的数据太多，导致存储空间的浪费和计算时间的增长。需要对数组值进行分析，然后得出对箱排序结果的改进。")])]),t("ul",[t("li",[n._v("如取值为0~99，则值为两位整数，则先对其个位数对10进行求余进行箱排序")]),t("li",[n._v("在排序的基础上再对其十位数除以10进行箱排序；这样只需要标号0~9的这10个箱子，进行二趟箱排序即可完成排序操作，而不需要对100个箱子进行一趟箱排序。")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 假设范围在10~999\nvoid basicSort(int *R, int n){\n  int i=0,j, one, two, three;\n\n  for(; i<n; i++){\n    for(j=0; j<3; j++){\n      one = R[i]%10;\n      two = parseInt((R[i]%100)/10);\n      three = parseInt(R[i]/100);\n    }\n\n  }\n}\n")])])])}],!1,null,null,null);i.default=l.exports}}]);