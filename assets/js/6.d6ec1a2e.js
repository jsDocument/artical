(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{176:function(e,t,a){e.exports=a.p+"assets/img/webpack.a8f8b5fe.png"},357:function(e,t,a){"use strict";a.r(t);var s=[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h3",{attrs:{id:"webpack-的打包过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的打包过程"}},[e._v("#")]),e._v(" webpack 的打包过程")]),e._v(" "),s("p",[s("img",{attrs:{src:a(176),alt:"整体流程图"}})]),e._v(" "),s("ol",[s("li",[e._v("初始化阶段（配置文件合并、校验）\n"),s("ul",[s("li",[e._v("初始化参数：从配置文件、配置对象和 Shell 参数中读取并与默认参数进行合并，组合成最终使用的参数。")]),e._v(" "),s("li",[e._v("创建编译对象：用上一步得到的参数创建 Compiler 对象。")]),e._v(" "),s("li",[e._v("初始化编译环境：包括注入内置插件、注册各种模块工厂、初始化 RuleSet 集合、加载配置的插件等。")])])]),e._v(" "),s("li",[e._v("构建阶段 module\n"),s("ul",[s("li",[e._v("开始编译：执行 Compiler 对象的 run 方法，创建 "),s("code",[e._v("Compilation")]),e._v(" 对象。 该对象负责组织整个打包过程, 包含每个构建环节及输出环节所对应的方法")]),e._v(" "),s("li",[e._v("确认编译入口：进入 "),s("code",[e._v("entryOption")]),e._v(" 阶段，读取配置的 Entries，递归遍历所有的入口文件，调用 "),s("code",[e._v("Compilation.addEntry")]),e._v(" 将入口文件转换为 "),s("code",[e._v("Dependency")]),e._v(" 对象。")]),e._v(" "),s("li",[e._v("编译模块（make）： 调用 "),s("code",[e._v("normalModule")]),e._v(" 中的 build 开启构建，从 entry 文件开始，调用 loader 对模块进行转译处理，然后调用 JS 解释器（acorn）将内容转化为 AST 对象，然后递归分析依赖，依次处理全部文件。")]),e._v(" "),s("li",[e._v("完成模块编译：在上一步处理好所有模块后，得到模块编译产物和依赖关系图。")])])]),e._v(" "),s("li",[e._v("生成阶段 chunk\n"),s("ul",[s("li",[e._v("输出资源（seal）：根据入口和模块之间的依赖关系，组装成多个包含多个模块的 Chunk，再把每个 Chunk 转换成一个 Asset 加入到输出列表，这步是可以修改输出内容的最后机会。")]),e._v(" "),s("li",[e._v("写入文件系统（emitAssets）：确定好输出内容后，根据配置的 output 将内容写入文件系统。")])])])]),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("webpack的实际入口是Compiler中的run方法, run一量执行后, 就开始编译和构建流程了, 几个比较重要的事件节点")]),e._v(" "),s("ul",[s("li",[e._v("compile 开始编译")]),e._v(" "),s("li",[e._v("make 从入口点分析模块及其依赖的模块，创建这些模块对象")]),e._v(" "),s("li",[e._v("build-module 构建模块")]),e._v(" "),s("li",[e._v("after-compile 完成构建")]),e._v(" "),s("li",[e._v("seal 封装构建结果")]),e._v(" "),s("li",[e._v("emit 把各个chunk输出到结果文件")]),e._v(" "),s("li",[e._v("after-emit 完成输出")])])]),e._v(" "),s("h4",{attrs:{id:"详细的构建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#详细的构建过程"}},[e._v("#")]),e._v(" 详细的构建过程")]),e._v(" "),s("ol",[s("li",[e._v("初始化\n"),s("ul",[s("li",[e._v("将命令行参数和用户的配置文件进行合并。")]),e._v(" "),s("li",[e._v("调用 getValidateSchema 对配置进行校验。")]),e._v(" "),s("li",[e._v("调用 createCompiler 创建 Compiler 对象。\n"),s("ul",[s("li",[e._v("将用户配置和默认配置进行合并处理。")]),e._v(" "),s("li",[e._v("实例化 Compiler。")]),e._v(" "),s("li",[e._v("实例化 NodeEnvironmentPlugin。")]),e._v(" "),s("li",[e._v("处理用户配置的 plugins，执行 plugin 的 apply 方法。")]),e._v(" "),s("li",[e._v("触发 environment 和 afterEnvironment 上注册的事件。")]),e._v(" "),s("li",[e._v("注册 webpack 内部插件。")]),e._v(" "),s("li",[e._v("触发 initialize 事件。")])])])])]),e._v(" "),s("li",[e._v("构建阶段\n"),s("ul",[s("li",[e._v("在实例化 compiler 之后，执行 compiler.run()。")]),e._v(" "),s("li",[e._v("执行 newCompilation 函数，调用 createCompilation 初始化 Compilation 对象。")]),e._v(" "),s("li",[e._v("执行 _addEntryItem 将入口文件存入 this.entries（map 对象），遍历 this.entries 对象构建 chunk。")]),e._v(" "),s("li",[e._v("执行 handleModuleCreation，开始创建模块实例。")]),e._v(" "),s("li",[e._v("执行 moduleFactory.create 创建模块。\n"),s("ul",[s("li",[e._v("执行 factory.hooks.factorize.call 钩子，然后会调用 ExternalModuleFactoryPlugin 中注册的钩子，用于配置外部文件的模块加载方式。")]),e._v(" "),s("li",[e._v("使用 enhanced-resolve 解析模块和 loader 的真实绝对路径。")]),e._v(" "),s("li",[e._v("执行 new NormalModule()创建 module 实例。")])])]),e._v(" "),s("li",[e._v("执行 addModule，存储 module。")]),e._v(" "),s("li",[e._v("执行 buildModule，添加模块到模块队列 buildQueue，开始构建模块, 这里会调用 normalModule 中的 build 开启构建。\n"),s("ul",[s("li",[e._v("创建 loader 上下文。")]),e._v(" "),s("li",[e._v("执行 runLoaders，通过 enhanced-resolve 解析得到的模块和 loader 的路径获取函数，执行 loader。")]),e._v(" "),s("li",[e._v("生成模块的 hash。")])])]),e._v(" "),s("li",[e._v("所有依赖都解析完毕后，构建阶段结束。")])])]),e._v(" "),s("li",[e._v("生成阶段\n"),s("ul",[s("li",[e._v("执行 Compilation.seal 进行产物的封装。---生成产物")]),e._v(" "),s("li",[e._v("构建本次编译的 ChunkGraph 对象，执行 buildChunkGraph，这里会将 import()、require.ensure 等方法生成的动态模块添加到 chunks 中。")]),e._v(" "),s("li",[e._v("遍历 "),s("code",[e._v("Compilation.modules")]),e._v(" 集合，将 module 按 entry/动态引入 的规则分配给不同的 Chunk 对象。")]),e._v(" "),s("li",[e._v("调用 Compilation.emitAssets 方法将 assets 信息记录到 Compilation.assets 对象中。")]),e._v(" "),s("li",[e._v("执行 hooks.optimizeChunkModules 的钩子，这里开始进行代码生成和封装。\n"),s("ul",[s("li",[e._v("执行一系列钩子函数（reviveModules, moduleId, optimizeChunkIds 等）。")]),e._v(" "),s("li",[e._v("执行 createModuleHashes 更新模块 hash。")]),e._v(" "),s("li",[e._v("执行 JavascriptGenerator 生成模块代码，这里会遍历 modules，创建构建任务，循环使用 JavascriptGenerator 构建代码，这时会将 import 等模块引入方式替换为 webpack_require 等，并将生成结果存入缓存。")]),e._v(" "),s("li",[e._v("执行 processRuntimeRequirements，根据生成的内容所使用到的 webpack_require 的函数，添加对应的代码。")]),e._v(" "),s("li",[e._v("执行 createHash 创建 chunk 的 hash。")]),e._v(" "),s("li",[e._v("执行 clearAssets 清除 chunk 的 files 和 auxiliary，这里缓存的是生成的 chunk 的文件名，主要是清除上次构建产生的废弃内容。")])])]),e._v(" "),s("li",[e._v("回到 Compiler 的流程中，执行 onCompiled 回调。-----文件输出​")]),e._v(" "),s("li",[e._v("触发 shouldEmit 钩子函数，这里是最后能优化产物的钩子。")]),e._v(" "),s("li",[e._v("遍历 module 集合，根据 entry 配置及引入资源的方式，将 module 分配到不同的 chunk。")]),e._v(" "),s("li",[e._v("遍历 chunk 集合，调用 Compilation.emitAsset 方法标记 chunk 的输出规则，即转化为 assets 集合。")]),e._v(" "),s("li",[e._v("写入本地文件，用的是 webpack 函数执行时初始化的文件流工具。")]),e._v(" "),s("li",[e._v("执行 done 钩子函数，这里会执行 compiler.run() 的回调，再执行 compiler.close()，然后执行持久化存储（前提是使用的 filesystem 缓存模式）。")])])])]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* webpackPrefetch: true */")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./desc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" element "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* webpackPreload: true */")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ChartingLibrary'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h4",{attrs:{id:"js-文件配置了-eslint、typescript、babel-等-loader，他将有可能执行五次编译，被五次解析为-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-文件配置了-eslint、typescript、babel-等-loader，他将有可能执行五次编译，被五次解析为-ast"}},[e._v("#")]),e._v(" JS 文件配置了 eslint、typescript、babel 等 loader，他将有可能执行五次编译，被五次解析为 AST")]),e._v(" "),s("ul",[s("li",[e._v("acorn: 用以依赖分析，解析为 acorn 的 AST")]),e._v(" "),s("li",[e._v("eslint-parser: 用以 lint，解析为 espree 的 AST")]),e._v(" "),s("li",[e._v("typescript: 用以 ts，解析为 typescript 的 AST")]),e._v(" "),s("li",[e._v("babel: 用以转化为低版本，解析为 @babel/parser 的 AST")]),e._v(" "),s("li",[e._v("terser: 用以压缩混淆，解析为 acorn 的 AST")]),e._v(" "),s("li",[e._v("thread-loader: 多进程loder，之前的 happypack")])]),e._v(" "),s("h4",{attrs:{id:"webpack编译的结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack编译的结果"}},[e._v("#")]),e._v(" webpack编译的结果")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("webpack_modules")]),e._v(": 维护所有依赖模块的数组，将入口模块解析为 AST，根据 AST 深度优先搜索所以模块，并构建出这个模块数组")]),e._v(" "),s("li",[e._v("每个模块都由一个包裹函数 (module, module.exports, "),s("strong",[e._v("webpack_require")]),e._v(")包裹自执行")]),e._v(" "),s("li",[s("strong",[e._v("webpack_require")]),e._v("(moduleId) 手动加载一个模块，对已经加载过的模块进行缓存，未加载过的模块，通过 id 定位到__webpack_modules__中的包裹函数，"),s("strong",[e._v("webpack_require")]),e._v("(0): 运行第一个模块，即运行入口模块")]),e._v(" "),s("li",[e._v("code spliting 如何动态加载 chunk的\n"),s("ol",[s("li",[e._v("import() 动态加载模块")]),e._v(" "),s("li",[s("strong",[e._v("webpack_require")]),e._v(".e: 加载 chunk。该函数将使用 document.createElement('script') 异步加载 chunk 并封装为 Promise。")]),e._v(" "),s("li",[e._v('self["webpackChunk"].push: JSONP cllaback，收集 modules 至 '),s("strong",[e._v("webpack_modules")]),e._v("，并将 "),s("strong",[e._v("webpack_require")]),e._v(".e 的 Promise 进行 resolve。")])])])])])}],n=a(0),l=Object(n.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),s,!1,null,null,null);t.default=l.exports}}]);