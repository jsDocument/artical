(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{47:function(t,a,s){t.exports=s.p+"assets/img/stream.783b7ae2.png"},83:function(t,a,s){"use strict";s.r(a);var n=[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"stream"}},[t._v("Stream")]),n("h3",{attrs:{id:"流-用于管理和处理数据-借助事件与非阻塞i-o库-允许在其可用的时候动态处理-不需要的时候释放掉。"}},[t._v("流: 用于管理和处理数据, 借助事件与非阻塞I/O库, 允许在其可用的时候动态处理, 不需要的时候释放掉。")]),n("ul",[n("li",[t._v("流所使用的场景: API接口, 内置fs, http, 解析器, 数据库, 网络协议")]),n("li",[t._v("fs.createReadStream(file).pipe(process.stdout)\n"),n("ol",[n("li",[t._v("连接了源头(上游, 文件)和消耗(下游, 标准输出)")]),n("li",[t._v("流会逐次调用fs.read, 将文件内容分批取出并传给下游")]),n("li",[t._v("上游数据被分块地连续取走, 下游收到的是一个先后到达的数据序列")])])])]),n("h3",{attrs:{id:"流的可用类"}},[t._v("流的可用类")]),n("ul",[n("li",[t._v("stream.Readable: I/O上获取数据, 定制类需要自己实现_read(size)\n"),n("ol",[n("li",[t._v("事件:")]),n("li",[t._v("readable：数据块可以从流中读取时发生")]),n("li",[t._v("data：有数据可读时发生")]),n("li",[t._v("end：数据读完时发生")]),n("li",[t._v("close：底层资源关闭时")]),n("li",[t._v("error：接收数据中出现错误时发生")]),n("li",[t._v("方法:")]),n("li",[t._v("read([size])")])]),n("pre",[n("code",[t._v("- 无参，返回内部缓冲区里的所有数据，无数据返回null\n- 有参，返回指定数量的数据，如果数据不足，会返回null\n")])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("setEncoding(encoding) 解码读到的数据")]),n("li",[t._v("pause()  暂停，不再发生data事件")]),n("li",[t._v("resume() 恢复可读流，继续发生data事件")]),n("li",[t._v("pipe(destination)")])]),n("pre",[n("code",[t._v("- 把可读流输出传递给「destination指定的Writable流」,两个流组成一个管道；\n- options是一个js对象，end属性为true, 表示Readable结束时自动结束Writable;\n- 可把一个Readable与多个Writable连在一起，组成多个管道，每个Writable都能到同样的数据，方法返回destination; 如果destination本身双是一个Readable，可级联调用pipe\n")])]),n("ol",{attrs:{start:"6"}},[n("li",[n("p",[t._v("unpipe(destination) 端口与指定destination管道，无参时，断开一这个可读流连在一起的管道。")])]),n("li",[n("p",[t._v("模式: 流动模式state.flowing=true、暂停模式「可读流创建时都是暂停模式」")])]),n("li",[n("p",[t._v("流动模式下, 数据会通过data事件输出, 不需要消耗方反复调用read(n)方法")])]),n("li",[n("p",[t._v("初始状态下, 监听“data”事件, 会使流进入流动模式, 暂停模式下, data事件不会进入流动模式, 要消耗流, 需要显示的调用read()方法")])]),n("li",[n("p",[t._v("从暂停到流动的方法有:")])]),n("li",[n("p",[t._v("显式的调用read()方法, 触发data事件")])]),n("li",[n("p",[t._v("显式调用resume()")])]),n("li",[n("p",[t._v("调用pipe()将可读流桥接到一个可写流上")])]),n("li",[n("p",[t._v("从流动到暂停的方式有:")])]),n("li",[n("p",[t._v("如果这个可读的流没有桥接可写流组成管道，直接调用pause()")])]),n("li",[n("p",[t._v("如果这个可读的流与若干可写流组成了管道，需要移除与“data”事件关联的所有处理器，并且调用unpipe()方法断开所有管道。")])])])])]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("require")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'http'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fs "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("require")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'fs'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhttp"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createServer")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createReadStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'filePath'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("pipe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("ul",[n("li",[n("p",[t._v("stream.Writable: 输出数据到底层I/O;  _write(chunk, encoding, cb)")]),n("ol",[n("li",[t._v("事件:")]),n("li",[t._v("finish： end()被调用，且所有数据都已被写入")]),n("li",[t._v("pipe：  Readable调pipe()方法时, writable发射这个事件")]),n("li",[t._v("unpipe")]),n("li",[t._v("error")]),n("li",[t._v("drain 缓存的数据被排空了")]),n("li",[t._v("方法:")]),n("li",[t._v("writable(chunk[,encoding][,callback])  写的内容大于缓存区大小时, 返回false, 表示停止写入, 需要read()完缓存区数据, 即缓存区被排空, 触发drain事件, 可以防止缓存区爆仓")]),n("li",[t._v("end(chunk[,encoding][,callback])")])])]),n("li",[n("p",[t._v("stream.Duplex: _read(size), _write(chunk, encoding, cb)")]),n("ol",[n("li",[t._v("常见的实现有: TCP socket, zlib, crypto")])])]),n("li",[n("p",[t._v("stream.Transform: _flush(size), _transform(chunk, encoding, cb)")]),n("ol",[n("li",[t._v("可写端写入数据变化 后会自动添加到可读端")]),n("li",[t._v("常见的实现有: zlib, crypto")]),n("li",[t._v("以某种方式修改我们的双工流, 没有输入数据要匹配输出数据的限制")])])])]),n("p",[t._v("下面为类接口实现执行流程图")]),n("p",[n("img",{attrs:{src:s(47),alt:"流程 text",title:"title"}})]),n("h4",{attrs:{id:"node内部实现的流："}},[t._v("Node内部实现的流：")]),n("ul",[n("li",[t._v("客户端的HTTP响应")]),n("li",[t._v("服务端的HTTP请求")]),n("li",[t._v("fs读取流: fs.createReadStream(source,{options})")]),n("li",[t._v("zlib流")]),n("li",[t._v("crypto（加密）流")]),n("li",[t._v("TCP套接字")]),n("li",[t._v("子进程的stdout和stderr")]),n("li",[t._v("process.stdin")])]),n("h3",{attrs:{id:"错误跟踪"}},[t._v("错误跟踪")]),n("ul",[n("li",[t._v("console.trace() 能够生成完整的堆栈跟踪, 会将Node核心模块event.js实现庄浪功能的地方跟踪到。")]),n("li",[t._v("console.error(err.stack)")])]),n("h3",{attrs:{id:"流的使用"}},[t._v("流的使用")]),n("blockquote",[n("p",[t._v("压缩")])]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("gzip "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" zlib"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createGzip")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninFile "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createReadStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\noutGzip "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createWriteStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'file.gz'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninFile"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("pipe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gzip"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("pipe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outGzip"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("blockquote",[n("p",[t._v("解压")])]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" gunzip "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" zlib"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createUnzip")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("flush"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" zlib"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("Z_FULL_FLUSH")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inGzip "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createReadStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'readable.gz'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outFile "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("createWriteStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'readable.unzipped'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninGzip"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("pipe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gunzip"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("pipe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outFile"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("h3",{attrs:{id:"实现一个流类的基本步骤"}},[t._v("实现一个流类的基本步骤")]),n("ol",[n("li",[t._v("在定义的类的构造函数中调用stream.Readable类接口")]),n("li",[t._v("定义类的原型继承stream.Readable.prototype")]),n("li",[t._v("定义原型的_read方法, 实现从底层读取数据到缓存队列。")])]),n("h3",{attrs:{id:"优化流的缓冲区大小"}},[t._v("优化流的缓冲区大小")]),n("ol",[n("li",[t._v("input = fs.createReadStream(file, {bufferSize： insize})")]),n("li",[t._v("output = fs.createWriteStream(file,{bufferSize: insize})")]),n("li",[t._v("gzip = zlib.createGzip({chunkSize: outsize})")]),n("li",[t._v("input.pipe(gzip).pipe(output)")])])])}],e=s(0),i=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);a.default=i.exports}}]);