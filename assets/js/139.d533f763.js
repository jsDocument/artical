(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{321:function(v,_,i){"use strict";i.r(_);var e=i(0),t=Object(e.a)({},(function(){var v=this.$createElement;this._self._c;return this._m(0)}),[function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"process"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#process"}},[v._v("#")]),v._v(" process")]),v._v(" "),i("p",[v._v("提供了当前Node.js进程的控制与信息")]),v._v(" "),i("h2",{attrs:{id:"提供的事件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提供的事件"}},[v._v("#")]),v._v(" 提供的事件")]),v._v(" "),i("ul",[i("li",[v._v("beforeExit: 没有工作计划时, nodejs进程就会退出, 注册该事件进行异步回调")]),v._v(" "),i("li",[v._v("exit: Node.js的事件循环没有额外的工作了 或 process.exit()调用时触发")]),v._v(" "),i("li",[v._v("message:  由IPC通道生成, 子进程childProcess.send()发送一个消息时触发")]),v._v(" "),i("li",[v._v("disconnect: 由IPC通道生成, IPC通道关闭时触发")]),v._v(" "),i("li",[v._v("warning 与 process.emitWarning()")]),v._v(" "),i("li",[v._v("rejectionHandled:  每当一个Promise被拒绝(reject)和在一个Node.js事件循环之后被附加到一个错误处理程序上的时候")]),v._v(" "),i("li",[v._v("unhandledRejection:  每当Promise被拒绝并且该Promise在这次事件循环中没有错误处理程序时触发")]),v._v(" "),i("li",[v._v("uncaughtException:  一个未捕获的JavaScript异常被传递回事件循环的时候触发")]),v._v(" "),i("li",[v._v("信号事件")])]),v._v(" "),i("h2",{attrs:{id:"提供的常用方法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提供的常用方法"}},[v._v("#")]),v._v(" 提供的常用方法")]),v._v(" "),i("ul",[i("li",[v._v("cwd() 当前工作目录")]),v._v(" "),i("li",[v._v("nextTick(fn) 在下一个事件循环子周期内附加I/O事件触发之前执行")]),v._v(" "),i("li",[v._v("hrtime()")]),v._v(" "),i("li",[v._v("memoryUsage() 内存使用情况")]),v._v(" "),i("li",[v._v("exit(0)")]),v._v(" "),i("li",[v._v("abort()立即退出")]),v._v(" "),i("li",[v._v("kill(pid[, signal])")]),v._v(" "),i("li",[v._v("chdir() 改变进程现在的工作目录")]),v._v(" "),i("li",[v._v("cpuUsage() 当前进程的用户和系统的CPU使用时间")]),v._v(" "),i("li",[v._v("disconnect() 关闭父进程的IPC通道")]),v._v(" "),i("li",[v._v("send() 父进程发消息")]),v._v(" "),i("li",[v._v("hrtime()")]),v._v(" "),i("li",[v._v("uptime() 当前进程已运行的秒数")])]),v._v(" "),i("h2",{attrs:{id:"属性"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[v._v("#")]),v._v(" 属性")]),v._v(" "),i("ul",[i("li",[v._v("arch 一个字符串，表示哪种操作系统CPU架构把Node.js文件编译成二进制")]),v._v(" "),i("li",[v._v("argv 包含命令行参数的数组")]),v._v(" "),i("li",[v._v("config")]),v._v(" "),i("li",[v._v("connected IPC通道被连接")]),v._v(" "),i("li",[v._v("env 当前用户的环境")]),v._v(" "),i("li",[v._v("execPath 进程的可执行文件的绝对路径")]),v._v(" "),i("li",[v._v("execArgv")]),v._v(" "),i("li",[v._v("exitCode 进程退出码")]),v._v(" "),i("li",[v._v("title 进程的标题")]),v._v(" "),i("li",[v._v("release")]),v._v(" "),i("li",[v._v("platform 进程运行的操作系统")]),v._v(" "),i("li",[v._v("stderr 连接到(fd2)的流")]),v._v(" "),i("li",[v._v("stdin  连接到(fd0)的流")]),v._v(" "),i("li",[v._v("stdout\n"),i("ul",[i("li",[v._v("write()")]),v._v(" "),i("li",[v._v("end()")]),v._v(" "),i("li",[v._v("isTTY判断repl模块和readline")])])])]),v._v(" "),i("blockquote",[i("p",[v._v("关于gid, uid 级与用户的相关信息与操作，warning相关的属性不在这里列出")])])])}],!1,null,null,null);_.default=t.exports}}]);