(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{267:function(n,e,r){"use strict";r.r(e);var t=r(6),o=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("p",[this._v("进程与线程\n输入url到页面展示完整过程\n1.用户输入\n2.卸载原页面并重定向到新页面\n3.处理Service Worker\n4.网络请求------【HTTP Cache】、【DNS】、【TCP】、【Request】\n5.服务端响应\n6.浏览器渲染详细流程\n浏览器处理每一帧的流程\nChrome Performance(性能)\nChrome Performance 工具的使用\nPerformance API介绍\n使用Performance API获取性能相关指标\nCoverage(覆盖率)\nLighthouse\nNetwork(网络)\n网络请求中的Timing(时间)\n网络请求的优先级\n网页总资源信息\nNetwork配置\n网络优化策略\n减少HTTP请求数\n使用HTTP缓存\n使用 HTTP/2.0\n避免重定向\n使用 dns-prefetch\n使用域名分片\nCDN\n压缩\n使用contenthash\n合理使用preload、prefetch\n浏览器渲染优化策略\n关键渲染路径\n强制同步布局问题\n如何减少重排与重绘\n静态文件优化策略\n图片格式\n图片优化\nHTML优化\nCSS优化\nJS优化\n字体优化\n浏览器储存优化策略\nCookie\nLocalStorage\nSessionStorage\nIndexDB\n其他优化策略\n使用PWA提高用户体验")])])}),[],!1,null,null,null);e.default=o.exports}}]);