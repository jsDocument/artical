(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{194:function(n,s,a){"use strict";a.r(s);var i=a(0),t=Object(i.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"常用排序c-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用排序c-实现"}},[n._v("#")]),n._v(" 常用排序C++实现")]),n._v(" "),a("p",[n._v("插入排序：")]),n._v(" "),a("ul",[a("li",[n._v("前后两项相比较，找出第一个后一项比前一项小的元素并暂存---temp；")]),n._v(" "),a("li",[n._v("将比该项大的所有项，向后移一位；")]),n._v(" "),a("li",[n._v("再将该项插入。")])]),n._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void insertSort(int &R, int n){\n  int i, j, temp;\n  for(i = 1; i< n; i++){\n    if(R[i]<R[i-1]){\n      temp = R[i];\n      // 将temp插入到队列的i-1之前, 即之前排好序的队列中\n      for(j = i-1; temp < R[j] && j>=0 ; j--){\n        R[j+1] = R[j];\n      }\n      R[j+1] = temp;\n    }\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("希尔排序即『缩小增量排序』,是插入排序的升级，即取一个增量数组[5, 3, 1], 则 [0, 0+5, 0+2"),a("em",[n._v("5]; [1, 1+5, 1+2")]),n._v("5]...依次进行分组比较。但如何选择递增数组？")]),n._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void shellInsert(int &R, int d, int n){\n  int i, j, temp;\n  for(i=d + 1; i <= n; i++){\n    // 找到分组中后一项比前一项小的，并暂存\n    if(R[i]<R[i-d]){\n      temp = R[i];\n      j = i - d;\n      //在分组中，从暂存项向前，比较并移动\n      while(j>0 && temp<R[j]){\n        R[j+d] = R[j];\n        j = j-d;\n      }\n      R[j+d] = temp;\n    }\n  }\n}\n// 按增量序列d[0..t-1]对R进行希尔排序\nvoid shellSort(int &R, int d[], int t, int n){\n  int k;\n  for(k = 0; k< t, k++){\n    shellInsert(R, d[k], n)\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("h2",{attrs:{id:"交换排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交换排序"}},[n._v("#")]),n._v(" 交换排序")]),n._v(" "),a("p",[n._v("冒泡排序：依次将相邻元素进行比较和交换")]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void BubbleSort(int &R, int n){\n  int i, j, flag, temp;\n  for(i = 0; i< n;i++){\n    flag = 0;\n    for(j = n-1; j>i+1; j--){\n      if(R[j]<R[j-1]){\n        temp = R[j-1];\n        R[j-1] = R[j];\n        R[j] = temp;\n        flag = 1;\n      }\n    }\n    if(flag == 0 ) return;\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("双向冒泡：交替改变扫描方向")]),n._v(" "),a("ul",[a("li",[n._v("noSwap 一趟扫描是否交换，第一次假设有交换")]),n._v(" "),a("li",[n._v("j 循环的元素下标，")]),n._v(" "),a("li",[n._v("i 交替循环的次数")])]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void DbubbleSort(int &R, int n){\n  int noSwap = 1, temp;\n  int i = 1, j;\n  while(noSwap){\n    noSwap = 0;\n    // 倒序循环比较\n    for(j = n-i; j>= i; j--){\n      if(R[j]<R[j-1]){\n        temp = R[j];\n        R[j] = R[j-1];\n        R[j-1] = temp;\n        noSwap = 1;\n      }\n    }\n    for(j=i; j< n-i; j++){\n      if(R[j]>R[j+1]){\n        temp = R[j];\n        R[j] = R[j+1];\n        R[j+1] = temp;\n        noSwap = 1;\n      }\n    }\n    i = i+1;\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])]),a("p",[n._v("快速排序：划分交换排序，是对冒泡排序的一种改进，冒泡是相邻节点的比较与交换，但该排序的比较和交换是从两端向中间进行。")]),n._v(" "),a("ul",[a("li",[n._v("无序区，较小无序区[low...i-1]和[i+1...high]")]),n._v(" "),a("li",[n._v("基准")])]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void Partition(int &R, int low, int high){\n  int i,j;\n  i = low;\n  j = high;\n  // 取低位作为基准值\n  temp = R[i];\n  // 判断条件；低位下标 小于 高位下标\n  while(i < j){\n    // 高位大于基准值，将高位下标向前移动\n    while(temp <= R[j]){\n      j--;\n    }\n    // 否则将高位的值，更新低位循环到的位置，并将低位下标向后移动\n    if(i < j){\n      R[i] = R[j];\n      i++;\n    }\n    // 基准值大于低位元素的值，将低位下标向后移动\n    while(temp>=R[i]){\n      i++;\n    }\n    // 否则将低位的值，更新高位循环到的位置，并将高位下标向前移动\n    if(i < j){\n      R[j] = R[i];\n      j--;\n    }\n  }\n  // 此时，高低位下标相遇，将基准值更新到该下标，并返回该下标\n  R[i] = temp;\n  return i;\n}\n\nvoid quickSort(int *R, int low, int high){\n  int p;\n  if(low < high){\n    p = Partition(R, low, hight);\n    quickSort(R, low, p-1);\n    quickSort(R, p+1, high);\n  }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br")])]),a("h2",{attrs:{id:"选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[n._v("#")]),n._v(" 选择排序")]),n._v(" "),a("p",[n._v("直接选择：直接从待排序区找到最小值，放入已排序区中。")]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void selectSort(int &R, int n){\n  int i, j, k, temp;\n  for(i = 0; i < n-1; i++){\n    k = i;\n    for(j = i+1; j < n; j++){\n      if(R[j]<R[k]){\n        k = j;\n      }\n    }\n    if(k != i){\n      temp = R[i];\n      R[i] = R[k];\n      R[k] = temp;\n    }\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("堆排序：如何建堆是关键，父节点R[i/2]，左子节点[2i]，右子节点[2i+1]，找出子节点中较大的那个和父节点比较，如果大于父节点则进行交换，再继续将该子节点作为父节点，与该父节点的其子节点再进行比较。")]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("/**\n* R  数组列表\n* i  根节点位置\n* n  列表长度\n*** 下标为0不可用\n**/\nvoid shift(int &R, int i, int n){\n  int j;\n  int temp = R[i];  // 取父节点\n  j = i*2;  // 左子节点\n  //\n  while(j<=n){\n    // 右子节点大于左子节点，更新j指向右子节点\n    if(j < n && R[j]<R[j+1]){\n      j++;\n    }\n    // 父节点大于子节点，推出循环\n    if(temp>=R[j]){\n      break;\n    }\n    // 将子节点值更新到父节点位置\n    R[i] = R[j];\n    // 将父子节点向后移动\n    i = j;\n    j = 2*i;\n  }\n  R[i] = temp;\n}\nvoid heapSort(int &R, int n){\n  int i, temp;\n  //  建大根堆\n  for(i = n/2; i>0; i--){\n    shift(R, i, n);\n  }\n  // 堆排序，将第一个最大与最后一项交换，此时只有最一后项是有序区，其他项为无序区，因为无序区的7个关键字不为堆，需要调整其为堆\n  for(i = n; i>1; i--){\n    //  交换第一位与最后一位\n    temp = R[1];\n    R[1] = R[i];\n    R[i] = temp;\n    shift(R, 1, i-1);  // 再对无序区建大根堆\n  }\n}\n\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br")])]),a("p",[n._v("归并排序：\n待排序看成n个长度为1的子元素，把子元素两两归并，有「n/2」个长度为2的有序组，再把「n/2」个有序组再两两归并，如此反复，直到归并得到一个长度为n的有序组为止，其为二路归并排序；可以用于对两个有序的序列进行合并。")]),n._v(" "),a("ul",[a("li",[n._v("长度为奇数，则最后一组子元素的长度可能小于。。，最后一个子元素无需和其他子元素归并")]),n._v(" "),a("li",[n._v("长度为偶数，则要对最后一对子元素中后一个子元素的区间上界为n？")])]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 对R[low...m] 和 R[m+1...high]归并为有序的 N[low...high]\nvoid Merge(int *R, int *N, int low, int m, int high){\n  int i, j, k;\n  i = low;\n  j = m+1;\n  k = low;\n  while(i<=m && j<=high){\n    if(R[i]<R[j]){\n      N[k++] = R[i++];\n    }else{\n      N[k++] = R[j++];\n    }\n    // 如果两个有序区长度不一样，将剩余项合并进来\n    while(i<=m){\n      N[k++] = R[i++];\n    }\n    while(j<=high){\n      N[k++] = R[j++];\n    }\n  }\n}\n\nvoid mergePass(int *R, int *N, int len, int n){\n  int i, j;\n  // 将两组合并后，N更新了2*len的元素\n  for(i = 1; i+2*len-1<n; i = i+2*len){\n    merge(R, N, i, i+len-1, i+2*len-1);\n  }\n  // 尚有文件未合并\n  if(i+len-1<n){\n    merge(R, N, i, i+len-1, n);\n  }else{ // 元素个数为奇数个，将剩余子元素复制到N中\n    for(j = i; j<=n; j++){\n      N[j] = R[j];\n    }\n  }\n}\n\nvoid mergeSort(int *R, int *N, int n){\n  int len = 1;\n  while(len<n){\n    // len为合并的有序组长度\n    mergePass(R, N, len, n)\n    len = len *2;\n  }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br")])]),a("h2",{attrs:{id:"分配排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配排序"}},[n._v("#")]),n._v(" 分配排序")]),n._v(" "),a("p",[n._v("箱排序：设置若干个箱子，依次扫描数组项，把等于k的记录全部装入到第k个箱子里，然后按序号依次将各非空箱子首尾连接起来。")]),n._v(" "),a("ul",[a("li",[n._v("循环序列，等于i的，存入到R[i]的链队列中，R[i].f，R[i].r")])]),n._v(" "),a("p",[n._v("基数排序：对箱排序的改进和推广，因箱排序只适用于取值范围较小的情况，否则所需箱子的数据太多，导致存储空间的浪费和计算时间的增长。需要对数组值进行分析，然后得出对箱排序结果的改进。")]),n._v(" "),a("ul",[a("li",[n._v("如取值为0~99，则值为两位整数，则先对其个位数对10进行求余进行箱排序")]),n._v(" "),a("li",[n._v("在排序的基础上再对其十位数除以10进行箱排序；这样只需要标号0~9的这10个箱子，进行二趟箱排序即可完成排序操作，而不需要对100个箱子进行一趟箱排序。")])]),n._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 假设范围在10~999\nvoid basicSort(int *R, int n){\n  int i=0,j, one, two, three;\n\n  for(; i<n; i++){\n    for(j=0; j<3; j++){\n      one = R[i]%10;\n      two = parseInt((R[i]%100)/10);\n      three = parseInt(R[i]/100);\n    }\n\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])])])}],!1,null,null,null);s.default=t.exports}}]);