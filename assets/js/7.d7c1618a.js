(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{174:function(t,v,_){t.exports=_.p+"assets/img/TSL.e640c0f2.png"},255:function(t,v,_){"use strict";_.r(v);var i=[function(){var t=this,v=t.$createElement,i=t._self._c||v;return i("div",{staticClass:"content"},[i("h3",{attrs:{id:"http2-与-tsl-过程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#http2-与-tsl-过程"}},[t._v("#")]),t._v(" http2 与 TSL 过程")]),t._v(" "),i("h4",{attrs:{id:"http2的主要特点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#http2的主要特点"}},[t._v("#")]),t._v(" http2的主要特点")]),t._v(" "),i("ul",[i("li",[t._v("二进制分帧")]),t._v(" "),i("li",[t._v("请求多路复用")]),t._v(" "),i("li",[t._v("头部压缩:  HPack使用哈夫曼编码和索引表实现，需要客户端和服务器都维护一个"),i("code",[t._v("表头字段的索引表")])]),t._v(" "),i("li",[t._v("服务器推送：有服务器根据解析 index.html 同事推送资源信息")]),t._v(" "),i("li",[t._v("赋予请求优先级")])]),t._v(" "),i("h4",{attrs:{id:"使用http2的优点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#使用http2的优点"}},[t._v("#")]),t._v(" 使用HTTP2的优点")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("解析速度快")]),t._v("：因为 HTTP2 是基于帧的协议，每个帧都有表示帧长度的字段；服务器解析 HTTP1.1 的请求时，必须不断地读入字节，直到遇到分隔符 CRLF 为止")]),t._v(" "),i("li",[i("code",[t._v("多路复用")]),t._v("：多个请求可以共用一个 TCP 连接，先响应就先处理谁，这样就充分的压榨了TCP这个全双工管道的性能，当然多路复用是建立在加载的资源在同一域名下。")]),t._v(" "),i("li",[i("code",[t._v("HTTP1.1的Pipelining技术")]),t._v("：HTTP1.1有一个可选的Pipelining技术，即当一个HTTP连接在等待接收响应时可以通过这个连接发送其他请求，但处理响应是按照顺序的，也就是后发的请求有可能"),i("code",[t._v("被先发的阻塞住")]),t._v("，也正因此很多浏览器默认是不开启Pipelining")]),t._v(" "),i("li",[i("code",[t._v("首部压缩")]),t._v("：HTTP/2对消息头采用 HPACK 进行压缩传输")]),t._v(" "),i("li",[i("code",[t._v("服务器推送")]),t._v("：服务端可以在发送页面HTML时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。")])]),t._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),i("ol",[i("li",[t._v("Curl 不支持 HTTP2")]),t._v(" "),i("li",[t._v("头阻塞：出现在 TCP 层，HTTP2 多路复用的并行特性对于 TCP 的丢包恢复机制是不可见的，一个丢失或顺序不对的数据包会导致所有活动的事务停顿，无论其是否受到丢包的直接影响。因为 HTTP2 开了太多并行的 TCP 连接")]),t._v(" "),i("li",[t._v("距离远？丢包可能性更大？")])])]),t._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("为什么 HTTP1.1 没有办法实现多路复用？")]),t._v(" "),i("p",[t._v("HTTP1.1为什么没有多路复用：HTTP/1.1 "),i("code",[t._v("不是二进制传输")]),t._v("，而是通过文本进行传输。由于没有流的概念，在使用并行传输（多路复用）传递数据时，接收端在接收到响应后，并"),i("code",[t._v("不能区分多个响应分别对应的请求")]),t._v("，所以无法将多个响应的结果重新进行组装，也就实现不了多路复用。")])]),t._v(" "),i("h4",{attrs:{id:"http的缺点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#http的缺点"}},[t._v("#")]),t._v(" HTTP的缺点")]),t._v(" "),i("ol",[i("li",[t._v("通信使用明文，可能会被窃听")]),t._v(" "),i("li",[t._v("不验证通信方的身份，可能遭遇伪装----查证书")]),t._v(" "),i("li",[t._v("无法证明报文的完整性，可能被篡改----数字签名校验")]),t._v(" "),i("li",[t._v("可通过SSL或TLS的组合使用，加密HTTP的通信内容，即HTTPS")]),t._v(" "),i("li",[t._v("HTTP是无状态协议：通过 Cookie 标识")])]),t._v(" "),i("h4",{attrs:{id:"http3"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" HTTP3")]),t._v(" "),i("ul",[i("li",[t._v("使用标准跟踪 RFC---QUIC通用的传输协议：包含流的复用和对每个流的流量控制，这两者与 HTTP/2 中实现的类似。通过在整个连接中提供流级别的可靠性和拥塞控制，比起 TCP 映射，QUIC 更能提高 HTTP 的性能")]),t._v(" "),i("li",[t._v("支持 0-RTT QUIC 连接，减少了建立"),i("code",[t._v("安全 TLS 连接的数据往返次数")]),t._v("。")])]),t._v(" "),i("h4",{attrs:{id:"https-主要解决的三个安全问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#https-主要解决的三个安全问题"}},[t._v("#")]),t._v(" HTTPS 主要解决的三个安全问题")]),t._v(" "),i("ol",[i("li",[t._v("握手过程主要是和服务器做通讯，生成"),i("code",[t._v("私有秘钥")]),t._v("，最后通过该秘钥"),i("code",[t._v("对称加密传输数据")]),t._v("。")]),t._v(" "),i("li",[t._v("还有"),i("code",[t._v("验证证书")]),t._v("的正确性。 证书验证过程保证了对方是合法的，并且中间人无法通过伪造证书方式进行攻击。")])]),t._v(" "),i("ul",[i("li",[t._v("内容隐私")]),t._v(" "),i("li",[t._v("防篡改")]),t._v(" "),i("li",[t._v("确认对方身份")]),t._v(" "),i("li",[t._v("TLS----SSL 协商")])]),t._v(" "),i("h4",{attrs:{id:"tcp-传输层"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tcp-传输层"}},[t._v("#")]),t._v(" TCP 传输层")]),t._v(" "),i("ol",[i("li",[t._v("对数据进行"),i("code",[t._v("分割")]),t._v("，打上"),i("code",[t._v("标记序号及端口号")]),t._v("，发送给网络层；")]),t._v(" "),i("li",[t._v("(IP)网络层"),i("code",[t._v("增加MAC地址")]),t._v("后转发给链路层")])]),t._v(" "),i("p",[i("img",{attrs:{src:_(174),alt:"TLS 握手过程"}})]),t._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),i("ul",[i("li",[t._v("wireshark 抓包 https/http2")]),t._v(" "),i("li",[t._v("http3，基于 UDP，解决了对头阻塞与 TCP 和 TLS握手时的延迟问题")])])])])}],s=_(0),l=Object(s.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),i,!1,null,null,null);v.default=l.exports}}]);