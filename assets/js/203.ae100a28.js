(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{387:function(e,t,n){"use strict";n.r(t);var v=n(0),i=Object(v.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h4",{attrs:{id:"内部事件初始始化与事件的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部事件初始始化与事件的实现"}},[e._v("#")]),e._v(" 内部事件初始始化与事件的实现")]),e._v(" "),n("h5",{attrs:{id:"初始化系统事件-initevents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化系统事件-initevents"}},[e._v("#")]),e._v(" 初始化系统事件__initEvents")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("如果options._asComponent「该属性会在指令绑定时添加」, 则对options.el注册组件事件\n"),n("code",[e._v("registerComponentEvents(vm, el)")])]),e._v(" "),n("ol",[n("li",[e._v("处理元素上的事件绑定属性, handler = 为作用域下调用$eval(attrs[i].value, true)")]),e._v(" "),n("li",[e._v("如果handler为函数, 添加属性 handler._fromParent = true")]),e._v(" "),n("li",[e._v("调用$on进行事件绑定")])])]),e._v(" "),n("li",[n("p",[e._v("对options.events 注册事件回调 registerCallbacks(this, '$on', options.events)")])]),e._v(" "),n("li",[n("p",[e._v("对options.watch 注册watch回调 registerCallbacks(this, '$watch', options.watch)")])])]),e._v(" "),n("p",[n("code",[e._v("registerCallbacks(vm, action, hash)")])]),e._v(" "),n("pre",[n("code",[e._v("1. 循环hash\n2. 取出对应的handlers, 如果handlers是数组, 则循环对其进行注册; 否则直接对其进行注册register\n")])]),e._v(" "),n("p",[n("code",[e._v("register(vm, action, key, handler, options)")])]),e._v(" "),n("pre",[n("code",[e._v("1. 判断handler的类型为function, 则调用相应的动作\n2. handler为string, 则在vm.$options.methods中找相应的方法, 再调用相应的动作\n3. handler为对象时, register(vm, action, key, handler.handler, handler),\n")])]),e._v(" "),n("h5",{attrs:{id:"api-event部分「自定义事件」-on-once-off-emit-broadcast-dispatch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api-event部分「自定义事件」-on-once-off-emit-broadcast-dispatch"}},[e._v("#")]),e._v(" API event部分「自定义事件」: $on, $once, $off, $emit, $broadcast, $dispatch")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("$on(event, fn)")]),e._v(" "),n("ol",[n("li",[e._v("将event和fn更新到this._events 数组")]),e._v(" "),n("li",[e._v("更新this的父实例 parent._eventCount[event] 的个数 + 1")])])]),e._v(" "),n("li",[n("p",[e._v("$once(event, fn)")]),e._v(" "),n("ol",[n("li",[e._v("定义on方法, 为解绑事件与执行fn; on.fn = fn。")]),e._v(" "),n("li",[e._v("调用this.$on")])])]),e._v(" "),n("li",[n("p",[e._v("$off(event, fn)")]),e._v(" "),n("ol",[n("li",[e._v("无参数时, 有父实例, 循环this._events, 取出其回调, 父实例parent._eventCount[event]的个数 - cbs.length")]),e._v(" "),n("li",[e._v("有1个参数, 取this._events[event]对应的回调, 并更新parent._eventCount[event]的个数 - cbs.length; this._events[event] = null")]),e._v(" "),n("li",[e._v("2个参数, 取出this._events[event]对应的回调, 并更新parent._eventCount[event]的个数 -1; 并将该fn从cbs中删除")])])]),e._v(" "),n("li",[n("p",[e._v("$emit(event)")]),e._v(" "),n("ol",[n("li",[e._v("isSource 为判断参数为字符串类型")]),e._v(" "),n("li",[e._v("event 为不字符串类型时，取event.name")]),e._v(" "),n("li",[e._v("shouldPropagate 取值为判断 isSource 或 事件回调队列cbs不存在")]),e._v(" "),n("li",[e._v("事件回调队列cbs存在")]),e._v(" "),n("li",[e._v("hasParentCbs 取值为 isSource 且 cbs的cb存在有_fromParent属性")]),e._v(" "),n("li",[e._v("hasParentCbs时, shouldPropagate = false")]),e._v(" "),n("li",[e._v("循环cbs执行，如果执行返回结果为 true, 且 !hasParentCbs 或 cb._fromParent属性存在, shouldPropagate = true")]),e._v(" "),n("li",[e._v("返回 shouldPropagate。")])])])]),e._v(" "),n("p",[n("code",[e._v("shouldPropagate 为 字符串事件, 且回调不存在 或 回调执行结果为 真 且")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("$broadcast(event)")]),e._v(" "),n("ol",[n("li",[e._v("isSource 为判断参数为字符串类型")]),e._v(" "),n("li",[e._v("event 为不字符串类型时，取event.name")]),e._v(" "),n("li",[e._v("this._eventsCount[event]不存在时, 直接返回")]),e._v(" "),n("li",[e._v("isSource时, 将参数第一项处理成 {name: event, source: this}")]),e._v(" "),n("li",[e._v("循环this.$children， 触发子实例的该事件, 根据返回值shouldPropagate, 判断是否再对其子实例调用broadcast。")])])]),e._v(" "),n("li",[n("p",[e._v("$dispatch(event)")]),e._v(" "),n("ol",[n("li",[e._v("触发该事件, 返回值shouldPropagate为false时, 直接返回")]),e._v(" "),n("li",[e._v("将参数第一项处理成 {name: event, source: this}")]),e._v(" "),n("li",[e._v("循环其父实例, 如果父实例触发该事件的返回结果 shouldPropagate为真, 更新parent为parent.$parent, 否则更新为null。")])])])]),e._v(" "),n("h5",{attrs:{id:"dom事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom事件"}},[e._v("#")]),e._v(" DOM事件")]),e._v(" "),n("ul",[n("li",[e._v("on(el, event, cb, useCapture)\n"),n("ol",[n("li",[e._v("addEventListener")])])]),e._v(" "),n("li",[e._v("off(el, event, cb)\n"),n("ol",[n("li",[e._v("removeEventListener")])])])]),e._v(" "),n("h5",{attrs:{id:"on指令的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#on指令的实现"}},[e._v("#")]),e._v(" on指令的实现")]),e._v(" "),n("ul",[n("li",[e._v("bind()\n"),n("ol",[n("li",[e._v("this.el为iframe 且 this.arg不为'load', 定义this.iframeBind方法, 调用on方法对this.el.contentWindow进行绑定")]),e._v(" "),n("li",[e._v("调用当前实例[指令]属性的on方法 this.on('load', this.iframeBind)")])])]),e._v(" "),n("li",[e._v("update(handler)\n"),n("ol",[n("li",[e._v("根据限定定义不同的事件回调handler")]),e._v(" "),n("li",[e._v("调用rest() 进行事件原来的回调this.handler进行解绑")]),e._v(" "),n("li",[e._v("更新this.handler = handler, 进行事件绑定: 调用iframeBind() 或 普通的on进行事件绑定")])])]),e._v(" "),n("li",[e._v("reset()\n"),n("ol",[n("li",[e._v("el = this.el.contentWindow(this.iframeBind) 或 this.el, 对事件回调进行off")])])]),e._v(" "),n("li",[e._v("unbind() 执行this.reset()")])])])}],!1,null,null,null);t.default=i.exports}}]);