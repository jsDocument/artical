(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{353:function(e,n,t){"use strict";t.r(n);var _=t(6),i=Object(_.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ngingx服务器安装与配置"}},[e._v("ngingx服务器安装与配置")]),e._v(" "),t("h2",{attrs:{id:"用途"}},[e._v("用途")]),e._v(" "),t("ol",[t("li",[e._v("负载均衡：nginx_upstream_check_module-0.3.0.tar.gz  检查后端服务器状态，nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz后端做负载均衡解决session sticky问题")]),e._v(" "),t("li",[e._v("缓存")]),e._v(" "),t("li",[e._v("ssl加密")])]),e._v(" "),t("h2",{attrs:{id:"下载安装与配置"}},[e._v("下载安装与配置")]),e._v(" "),t("ol",[t("li",[e._v("下载")]),e._v(" "),t("li",[e._v("进入安装目录，编译时./configure --help以--without开头的都默认安装\n"),t("ul",[t("li",[e._v("--prefix=PATH ： 指定nginx的安装目录。默认 /usr/local/nginx。")]),e._v(" "),t("li",[e._v("--conf-path=PATH ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf。")]),e._v(" "),t("li",[e._v("--user=name： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。--group=name类似")]),e._v(" "),t("li",[e._v("--with-pcre ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用--with-pcre自动找到库文件。使用--with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。")]),e._v(" "),t("li",[e._v("--with-zlib=PATH ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。")]),e._v(" "),t("li",[e._v("--with-http_ssl_module ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装")]),e._v(" "),t("li",[e._v("--with-http_stub_status_module ： 用来监控 Nginx 的当前状态")]),e._v(" "),t("li",[e._v("--with-http_realip_module ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址")]),e._v(" "),t("li",[e._v("--add-module=PATH ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）")])])]),e._v(" "),t("li",[e._v("nginx.conf配置文件\n"),t("ul",[t("li",[e._v("main 全局设置，与具体业务无关的参数")]),e._v(" "),t("li",[e._v("server 主机设置，主要是虚拟主机域名、IP和端口，继承main")]),e._v(" "),t("li",[e._v("upstream 上游服务器设置(主要为反向代理、负载均衡相关配置)，一系列后端服务器，即不会继承指令也不会被继承，有自己特殊指令")]),e._v(" "),t("li",[e._v("location （URL配置特定位置后的设置），用于匹配网页位置，继承server")])])]),e._v(" "),t("li",[e._v("能用指令\n"),t("ol",[t("li",[e._v("main\n"),t("ul",[t("li",[e._v("user username pwd;")]),e._v(" "),t("li",[e._v("worker_processes n; 工作进程的个数，master进程是接收并分配请求给worker处理，可设置为cup核数也中auto。")]),e._v(" "),t("li",[e._v("worker_cpu_affinity；在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。")]),e._v(" "),t("li",[e._v("worker_rlimit_nofile；可以限制为操作系统最大的限制65535。")]),e._v(" "),t("li",[e._v("error_log path")]),e._v(" "),t("li",[e._v("pid path/nginx.pid")]),e._v(" "),t("li",[e._v("events {}：worker_connections每一个worker进程能并发处理的最大连接数；use epoll事件模型")]),e._v(" "),t("li",[e._v("http {}：sendfile on 开启高效文件传输模式，指定是否调用sendfile函数来传输文件；keepalive_timeout 连接超时时间；send_timeout响应客户端的超时时间；client_max_body_size 客户端请求的最大文件字节数；client_body_buffer_size 缓冲区代理缓冲用户端请求的最大字节数")]),e._v(" "),t("li",[e._v("server {}")]),e._v(" "),t("li",[e._v("location {}\n"),t("ul",[t("li",[e._v("root 服务器的默认网站根目录")]),e._v(" "),t("li",[e._v("index 路径下默认访问的文件名")]),e._v(" "),t("li",[e._v("proxy_pass 对应负载均衡")]),e._v(" "),t("li",[e._v("proxy_redirect")]),e._v(" "),t("li",[e._v("proxy_set_header Host $host;")]),e._v(" "),t("li",[e._v("proxy_set_header X-Real-IP $remote_addr;")]),e._v(" "),t("li",[e._v("proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;")]),e._v(" "),t("li",[e._v("allow ip")]),e._v(" "),t("li",[e._v("deny ip 允许或禁止某个ip")]),e._v(" "),t("li",[e._v("autoindex on 列出整个目录，autoindex_exact_size off 显示文件的确切大小，autoindex_localtime on显示文件时间为GMT时间。")])])]),e._v(" "),t("li",[e._v("http_proxy {}：proxy_connect_timeout代理跟后端服务器连接超时时间，proxy_read_timeout连接后与后端服务器两个成功的响应操作之间的超时时间，proxy_buffer_size从后端realserver读取并保存用户头信息的缓冲区大小，proxy_buffers，proxy_busy_buffers_size高负荷下缓冲大小")])])])])])]),e._v(" "),t("h2",{attrs:{id:"启动与关闭"}},[e._v("启动与关闭")]),e._v(" "),t("ol",[t("li",[e._v("检查配置文件是否正确：nginx -t")]),e._v(" "),t("li",[e._v("启动：nginx；sudo brew services start nginx")]),e._v(" "),t("li",[e._v("关闭：nginx -s stop；sudo brew services stop nginx")]),e._v(" "),t("li",[e._v("重启：nginx -s reload   [reload\\reopen\\stop\\quit]")]),e._v(" "),t("li",[e._v("指定配置文件并启动：nginx -c 'path'")])]),e._v(" "),t("h2",{attrs:{id:"作为系统服务管理"}},[e._v("作为系统服务管理")]),e._v(" "),t("ol",[t("li",[e._v("下载nginx到/etc/init.d/，修改路径并赋予可执行权限")]),e._v(" "),t("li",[e._v("service nginx {start|stop|status|restart|reload|configtest}")])]),e._v(" "),t("h2",{attrs:{id:"不同平台下载、安装工具与命令"}},[e._v("不同平台下载、安装工具与命令")]),e._v(" "),t("ol",[t("li",[e._v("linux：yum install nginx")])]),e._v(" "),t("ul",[t("li",[e._v("编译 make && make install")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("mac: brew search/install/uninstall/update/list")])]),e._v(" "),t("h2",{attrs:{id:"进程"}},[e._v("进程")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("echo PID > /var/run/nginx.pid")])]),e._v(" "),t("li",[t("p",[e._v("ps aux | grep nginx（user, PID, CPU, MEM, VSZ, RSS, TTY, STAT, START TIME, COMMAND,...）")]),e._v(" "),t("ul",[t("li",[e._v("STAT的值：\nR 运行    Runnable (on run queue)            正在运行或在运行队列中等待。\nS 睡眠    Sleeping                休眠中, 受阻, 在等待某个条件的形成或接受到信号。\nI 空闲    Idle\nZ 僵死    Zombie（a defunct process)        进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放。\nD 不可中断    Uninterruptible sleep (ususally IO)    收到信号不唤醒和不可运行, 进程必须等待直到有中断发生。\nT 终止    Terminate                进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行。\nP 等待交换页\nW 无驻留页    has no resident pages        没有足够的记忆体分页可分配。\nX 死掉的进程\n< 高优先级进程                    高优先序的进程\nN 低优先    级进程                    低优先序的进程\nL 内存锁页    Lock                有记忆体分页分配并缩在记忆体内\ns 进程的领导者（在它之下有子进程）；\nl 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）")])]),e._v(" "),t("ul",[t("li",[e._v("位于后台的进程组")])])]),e._v(" "),t("li",[t("p",[e._v("pkill -9 name")])]),e._v(" "),t("li",[t("p",[e._v("netstat 状态信息(参数：-c(持续列出)，-t(tcp)，-u(udp)，-s(统计表)，-n(直接显示ip)，-i(网络界面))  | grep ':80'")])]),e._v(" "),t("li",[t("p",[e._v("lsof -i")])])]),e._v(" "),t("p",[e._v("###javascript\nuser  www www;\nworker_processes  2;")]),e._v(" "),t("p",[e._v("error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;")]),e._v(" "),t("p",[e._v("pid        logs/nginx.pid;")]),e._v(" "),t("p",[e._v("events {\nuse epoll;\nworker_connections  2048;\n}")]),e._v(" "),t("p",[e._v("http {\ninclude       mime.types;\ndefault_type  application/octet-stream;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('#log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n#                  \'$status $body_bytes_sent "$http_referer" \'\n#                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n#access_log  logs/access.log  main;\n\nsendfile        on;\n# tcp_nopush     on;\n\nkeepalive_timeout  65;\n')])])]),t("h1",{attrs:{id:"gzip压缩功能设置"}},[e._v("gzip压缩功能设置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("gzip on;\ngzip_min_length 1k;\ngzip_buffers    4 16k;\ngzip_http_version 1.0;\ngzip_comp_level 6;\ngzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\ngzip_vary on;\n")])])]),t("h1",{attrs:{id:"http-proxy-设置"}},[e._v("http_proxy 设置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("client_max_body_size   10m;\nclient_body_buffer_size   128k;\nproxy_connect_timeout   75;\nproxy_send_timeout   75;\nproxy_read_timeout   75;\nproxy_buffer_size   4k;\nproxy_buffers   4 32k;\nproxy_busy_buffers_size   64k;\nproxy_temp_file_write_size  64k;\nproxy_temp_path   /usr/local/nginx/proxy_temp 1 2;\n")])])]),t("h1",{attrs:{id:"设定负载均衡后台服务器列表"}},[e._v("设定负载均衡后台服务器列表")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("upstream  backend  { \n          #ip_hash; \n          server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  \n          server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  \n}\n")])])]),t("h1",{attrs:{id:"很重要的虚拟主机配置"}},[e._v("很重要的虚拟主机配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("server {\n    listen       80;\n    server_name  itoatest.example.com;\n    root   /apps/oaapp;\n\n    charset utf-8;\n    access_log  logs/host.access.log  main;\n\n    #对 / 所有做负载均衡+反向代理\n    location / {\n        root   /apps/oaapp;\n        index  index.jsp index.html index.htm;\n\n        proxy_pass        http://backend;  \n        proxy_redirect off;\n        # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header  Host  $host;\n        proxy_set_header  X-Real-IP  $remote_addr;  \n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n        \n    }\n\n    #静态文件，nginx自己处理，不去backend请求tomcat\n    location  ~* /download/ {  \n        root /apps/oa/fs;  \n        \n    }\n    location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   \n    {   \n        root /apps/oaapp;   \n        expires      7d; \n    }\n    location /nginx_status {\n        stub_status on;\n        access_log off;\n        allow 192.168.10.0/24;\n        deny all;\n    }\n\n    location ~ ^/(WEB-INF)/ {   \n        deny all;   \n    }\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n}\n")])])]),t("h2",{attrs:{id:"其它虚拟主机-server-指令开始"}},[e._v("其它虚拟主机，server 指令开始")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("h3",{attrs:{id:""}})])}),[],!1,null,null,null);n.default=i.exports}}]);