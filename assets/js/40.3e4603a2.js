(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{70:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"正则"}},[t._v("正则")]),a("h2",{attrs:{id:"正则原理"}},[t._v("正则原理")]),a("ul",[a("li",[t._v("源字符串，都有字符和位置【从0开始逐个匹配】")]),a("li",[t._v("占有字符：子表达式匹配到的是字符内容，而非位置，且在最终结果中；互斥的，即一个字符同一时间只能由一个子表达式匹配")]),a("li",[t._v("零宽度：子表达式匹配到的是仅仅是位置，或者匹配的内容并不保存到最终结果中；非互斥，即可以同时由多个零宽度的子表达式匹配。如：^,")]),a("li",[t._v("?= 顺序环视 匹配当前位置，右边是否有相应限定的字符出现。")]),a("li",[t._v("如 /^(?=D)[E-F]+$/\n"),a("ol",[a("li",[t._v("位置开始位置0；")]),a("li",[t._v("零宽度子表达式之间不互斥，即同一个位置可以由多个零宽度子表达式匹配，所以环视从位置0开始尝试匹配，右侧为字符D；才为匹配成功；")]),a("li",[t._v("因为上个匹配只进行匹配位置，结果不保存到最终结果，如果上个匹配成功的位置为0，那么下面也是从0位置开始匹配。")])])])]),a("h2",{attrs:{id:"性能提升"}},[t._v("性能提升")]),a("ul",[a("li",[t._v("减少回溯次数【减少循环查找同一个字符次数】")]),a("li",[t._v("测试与优化工具：regexbuddy")]),a("li",[t._v("使用正确的边界匹配器（^、$、\\b、\\B等），限定搜索字符串位置")]),a("li",[t._v("使用具体的元字符、字符类（\\d、\\w、\\s等） ，[^]少用”.”字符")]),a("li",[t._v("使用正确的量词（+、*、?、{n,m}），如果能够限定长度，匹配最佳")]),a("li",[t._v("使用非捕获组、原子组，减少没有必要的字匹配捕获用(?😃")]),a("li",[t._v("进行分组匹配 | + g模式")])]),a("h2",{attrs:{id:"正则特殊表示"}},[t._v("正则特殊表示")]),a("ul",[a("li",[t._v("\\b 单词边界 \\f 换页符  \\n换行符  \\r 回车符 \\t 制表符 \\v 垂直制表符  \\x20 空白符  \\x0A(16)  \\011(8)  posix字符类")]),a("li",[t._v("\\b: 单词与空格之间，一边为\\w，一边为非\\w")]),a("li",[t._v("\\B: 左右两边都为\\w或非\\w")])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 好的正则例子:")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 多行注释")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 单行注释")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\x20\\"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("\\"),a("span",{attrs:{class:"token regex"}},[t._v("/\\/[^0-9\\n]\\*/")]),t._v("\n")])]),a("h3",{attrs:{id:"获取匹配的子捕获-regexp-2-express"}},[t._v("获取匹配的子捕获: RegExp.$2 != express")]),a("h3",{attrs:{id:"反向引用：-1-2"}},[t._v("反向引用："),a("code",[t._v("\\1 \\2")])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 示例")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/tom(?=(and))\\1jerry/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(?=(.+.+))\\1+X/")]),t._v("\n")])]),a("h3",{attrs:{id:"分组-零宽度断言-搜索与反向搜索及特殊表达"}},[t._v("分组, 零宽度断言, 搜索与反向搜索及特殊表达")]),a("ul",[a("li",[a("code",[t._v("reg?<name>exp")]),t._v(" 匹配exp, 并将捕获文本放到名称为name的组里")]),a("li",[a("code",[t._v("(?:exp)")]),t._v(" 不捕获")]),a("li",[a("code",[t._v("?=")]),t._v(" 正向肯定环视, 即要求表达式中要出现该表达要求的内容, 但不捕获; 如 "),a("code",[t._v("/^(?:\\/(?=$))?$/i, /^\\/dialog(?:\\/(?=$))?$/i")]),t._v(",")]),a("li",[a("code",[t._v("?!")]),t._v(" 正向否定环视, 即要求表达式中不要出现该表达要求的内容, 但不捕获;如 "),a("code",[t._v("/\\((?!\\?)/g")])]),a("li",[a("code",[t._v("?<=")]),t._v(" 逆向肯定")]),a("li",[a("code",[t._v("?!<")]),t._v(" 逆向否定")]),a("li",[a("code",[t._v("(?#comment)")]),t._v(" 阅读注释")]),a("li",[a("code",[t._v("$&")]),t._v(" 全文本")]),a("li",[t._v("$` 匹配字符串的左边文本")]),a("li",[t._v("$' 匹配字符串的右边文本")]),a("li",[t._v("$$  $转移")])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 例子")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("$"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("g"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$&,'")]),t._v("\n")])]),a("h3",{attrs:{id:"特殊属性的意义"}},[t._v("特殊属性的意义")]),a("ul",[a("li",[t._v("input, "),a("code",[t._v("RegExp.$_")]),t._v(" 整个待匹配字符串")]),a("li",[t._v("leftContext, RegExp['$`'] 上次匹配之前的子字符串")]),a("li",[t._v("lastMatch, "),a("code",[t._v("RegExp['$&']")]),t._v(" 最后匹配的字符串")]),a("li",[t._v("multiline, "),a("code",[t._v("RegExp['$\\*']")]),t._v(" 是否所有表达式都使用多行模式的布尔值")]),a("li",[t._v("lastParen, "),a("code",[t._v("RegExp['$+']")]),t._v(" 最后匹配的分组")])]),a("h3",{attrs:{id:"汉字范围-u4e00-u9fff"}},[t._v("汉字范围: "),a("code",[t._v("[\\u4e00-\\u9fff]")])])])}],!1,null,null,null);s.default=e.exports}}]);