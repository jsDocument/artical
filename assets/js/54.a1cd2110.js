(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{233:function(a,t,_){"use strict";_.r(t);var v=_(0),r=Object(v.a)({},(function(){var a=this.$createElement;this._self._c;return this._m(0)}),[function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"位操作-与-运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位操作-与-运算"}},[a._v("#")]),a._v(" 位操作 与 运算")]),a._v(" "),_("h2",{attrs:{id:"位运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[a._v("#")]),a._v(" 位运算")]),a._v(" "),_("h2",{attrs:{id:"a-b-按位与"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-b-按位与"}},[a._v("#")]),a._v(" a & b  按位与")]),a._v(" "),_("p",[a._v("每一个比特位，只有两个操作数都为1时才为1，否则为0")]),a._v(" "),_("h2",{attrs:{id:"a-b-按位或"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-b-按位或"}},[a._v("#")]),a._v(" a | b  按位或")]),a._v(" "),_("ul",[_("li",[a._v("每一个比特位，至少有一个操作数都为1时就为1，否则为0")])]),a._v(" "),_("h2",{attrs:{id:"a-b-按位异或"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-b-按位异或"}},[a._v("#")]),a._v(" a ^ b  按位异或")]),a._v(" "),_("ul",[_("li",[a._v("每一个比特位，当两个操作数的比特位 有且只有一个1时就为1，否则为0")])]),a._v(" "),_("h2",{attrs:{id:"a"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a"}},[a._v("#")]),a._v(" ~ a")]),a._v(" "),_("ul",[_("li",[a._v("反转操作数的比特位，即0变成1，1变成0")])]),a._v(" "),_("h2",{attrs:{id:"a-b-左移-a情况下：a-2-【进行b次相乘】"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-b-左移-a情况下：a-2-【进行b次相乘】"}},[a._v("#")]),a._v(" a << b  左移    A情况下：a * 2 【进行b次相乘】")]),a._v(" "),_("ul",[_("li",[a._v("将 a 的二进制形式向左移 b (< 32) 比特位，右边用0填充")])]),a._v(" "),_("h2",{attrs:{id:"a-b-右移-a情况下：a-2-【进行b次相除】"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-b-右移-a情况下：a-2-【进行b次相除】"}},[a._v("#")]),a._v(" a >> b  右移    A情况下：a / 2  【进行b次相除】")]),a._v(" "),_("ul",[_("li",[a._v("将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位")])]),a._v(" "),_("h2",{attrs:{id:"a-b-无符号右移"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-b-无符号右移"}},[a._v("#")]),a._v(" a >>> b 无符号右移")]),a._v(" "),_("ul",[_("li",[a._v("将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充。")])]),a._v(" "),_("h2",{attrs:{id:"规律"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#规律"}},[a._v("#")]),a._v(" 规律")]),a._v(" "),_("ul",[_("li",[a._v("(~ 12 - 1)  即此值的负值")]),a._v(" "),_("li",[a._v("正值时，最左的比特位是0")]),a._v(" "),_("li",[a._v("负值时，最左的比特位是1，即最左边的比特位为符号位")]),a._v(" "),_("li",[a._v("0 是所有比特数字为0")]),a._v(" "),_("li",[a._v("-1 是所有比特数字为1")]),a._v(" "),_("li",[a._v("-2147483648（十六进制形式：-0x80000000）  最左边为1，其他比特位为0的整数  【32位】")]),a._v(" "),_("li",[a._v("2147483647（十六进制形式：0x7fffffff）是除了最左边为0外，其他比特位都为1的整数。")])]),a._v(" "),_("h2",{attrs:{id:"进制转换-r进制中的数位排列-r-index-相邻相关进制的一次方"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进制转换-r进制中的数位排列-r-index-相邻相关进制的一次方"}},[a._v("#")]),a._v(" 进制转换   R进制中的数位排列   R^index    相邻相关进制的一次方")]),a._v(" "),_("ul",[_("li",[a._v("十 转换成 二进制  ，对2取数值取余(模)，反向写出。")]),a._v(" "),_("li",[a._v("二 转换成 十进制  ，按位 值 * 2^index")]),a._v(" "),_("li",[a._v("十 转换成 八进制  ，对8取数值取余(模)，反向写出。")]),a._v(" "),_("li",[a._v("八 转换成 十进制  ，按位 值 * 8^index")]),a._v(" "),_("li",[a._v("十六 与 十进制的相互转换  与上面类似")]),a._v(" "),_("li",[a._v("二 转换成 八进制  ，三位一组，缺位处用0填补，然后按十进制进行转换。")]),a._v(" "),_("li",[a._v("八 转换成 二进制  ，三位一级，缺位处用0填补，然后按进进制进行转换。")]),a._v(" "),_("li",[a._v("二 转换成 十六进制 ，四位一组，8 4 2 1")]),a._v(" "),_("li",[a._v("十 转换成 二进制  先转成16进制(除16未模)，再用 8 4 2 1的方式转成二进制")]),a._v(" "),_("li",[a._v("二 转换成 十进制  迁转16，再转十")])]),a._v(" "),_("h2",{attrs:{id:"负数，先写其补码形式，再进行进制转换【16位】"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#负数，先写其补码形式，再进行进制转换【16位】"}},[a._v("#")]),a._v(" 负数，先写其补码形式，再进行进制转换【16位】")]),a._v(" "),_("ul",[_("li",[a._v("十 转换成 八  转二进制，补码、取反-1【符号位不变】，二 转换成 八进制")])]),a._v(" "),_("h2",{attrs:{id:"小数，0-8-16，取整数部分；拿小数部分乘以16，取整，再乘"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小数，0-8-16，取整数部分；拿小数部分乘以16，取整，再乘"}},[a._v("#")]),a._v(" 小数，0.8*16，取整数部分；拿小数部分乘以16，取整，再乘")])])}],!1,null,null,null);t.default=r.exports}}]);