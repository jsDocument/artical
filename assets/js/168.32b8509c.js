(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{344:function(e,_,l){"use strict";l.r(_);var v=l(0),i=Object(v.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,_=e.$createElement,l=e._self._c||_;return l("div",{staticClass:"content"},[l("h1",{attrs:{id:"webpack-优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化"}},[e._v("#")]),e._v(" webpack 优化")]),e._v(" "),l("ul",[l("li",[l("p",[e._v("提高构建速度：使用 speed-measure-webpack-plugin (opens new window)可评估每个 loader/plugin 的执行耗时。")]),e._v(" "),l("ul",[l("li",[e._v("更快的 loader: swc(采用 rust 语言编写)-----负责 AST 转换的")]),e._v(" "),l("li",[e._v("持久化缓存----cache:{type: filesystem}，将Module、Chunk、ModuleChunk 等信息序列化到磁盘中")]),e._v(" "),l("li",[e._v("JS 文件配置了 eslint、typescript、babel 等 loader，他将有可能执行五次编译，被五次解析为 AST\n"),l("ul",[l("li",[e._v("acorn: 用以依赖分析，解析为 acorn 的 AST")]),e._v(" "),l("li",[e._v("eslint-parser: 用以 lint，解析为 espree 的 AST")]),e._v(" "),l("li",[e._v("typescript: 用以 ts，解析为 typescript 的 AST")]),e._v(" "),l("li",[e._v("babel: 用以转化为低版本，解析为 @babel/parser 的 AST")]),e._v(" "),l("li",[e._v("terser: 用以压缩混淆，解析为 acorn 的 AST")]),e._v(" "),l("li",[e._v("thread-loader: 多进程loder，之前的 happypack")])])])])]),e._v(" "),l("li",[l("p",[e._v("runtime")]),e._v(" "),l("ul",[l("li",[e._v("__webpack_modules__维护所有模块数组\n"),l("ul",[l("li",[e._v("将入口模块解析为 AST，根据 AST 深度优先搜索所以模块，并构建出这个模块数组")]),e._v(" "),l("li",[e._v("每个模块都由一个包裹函数 (module, module.exports, "),l("strong",[e._v("webpack_require")]),e._v(") 对模块进行包裹构成")])])]),e._v(" "),l("li",[l("strong",[e._v("webpack_require")]),e._v("(moduleId) 手动加载一个模块，对已经加载过的模块进行缓存，未加载过的模块，通过 id 定位到__webpack_modules__中的包裹函数")]),e._v(" "),l("li",[l("strong",[e._v("webpack_require")]),e._v("(0): 运行第一个模块，即运行入口模块")])])]),e._v(" "),l("li",[l("p",[e._v("code spliting 如何动态加载 chunk的")]),e._v(" "),l("ul",[l("li",[e._v("import() 动态加载模块")]),e._v(" "),l("li",[l("strong",[e._v("webpack_require")]),e._v(".e: 加载 chunk。该函数将使用 document.createElement('script') 异步加载 chunk 并封装为 Promise。")]),e._v(" "),l("li",[e._v('self["webpackChunk"].push: JSONP cllaback，收集 modules 至 '),l("strong",[e._v("webpack_modules")]),e._v("，并将 "),l("strong",[e._v("webpack_require")]),e._v(".e 的 Promise 进行 resolve。")])])]),e._v(" "),l("li",[l("p",[e._v("打包体积优化")]),e._v(" "),l("ul",[l("li",[e._v("分析 webpack-analizyer-plugin?")]),e._v(" "),l("li",[e._v("js 压缩 minify----目前前端工程化中使用 terser (opens new window)和 swc (opens new window)进行 JS 代码压缩\n"),l("ul",[l("li",[e._v("去掉多余的空格、换行、注释")]),e._v(" "),l("li",[e._v("变量名、函数名、属性名用更短的名字代替")]),e._v(" "),l("li",[e._v("布尔运算会做变化----做了精简")]),e._v(" "),l("li",[e._v("预编译的运算")])])])])]),e._v(" "),l("li",[l("p",[e._v("polyfill: corejs")]),e._v(" "),l("ul",[l("li",[e._v("包含了所有 ES- 的 polyfill，并集成在 babel 等编译工具之中")]),e._v(" "),l("li",[e._v("@babel/preset-env，@babel/polyfill 对高级功能支持进行配置")]),e._v(" "),l("li",[e._v("对polyfill的体积控制")])])]),e._v(" "),l("li",[l("p",[e._v("eslint，对代码不仅有风格的校验，更有可读性、安全性、健壮性的校验。")]),e._v(" "),l("ul",[l("li",[e._v("rules")]),e._v(" "),l("li",[e._v("plugin")]),e._v(" "),l("li",[e._v("extends")])])]),e._v(" "),l("li",[l("p",[e._v("webpack 基础")])]),e._v(" "),l("li",[l("p",[e._v("webpack 的编译流程")]),e._v(" "),l("ul",[l("li",[e._v("初始化配置参数----结合 webpack.config.js 和默认参数，merge 出最终参数。")]),e._v(" "),l("li",[e._v("开始编译，初始化一个 Compiler 对象，加载所以配置的插件，执行对象的 run 方法")]),e._v(" "),l("li",[e._v("确定入口文件")]),e._v(" "),l("li",[e._v("编译模块：根据入口、配置的 Loader 对模块进行翻译，在递归对依赖的模块进行翻译")]),e._v(" "),l("li",[e._v("经过 Loader 的翻译，得到了每个模块的翻译结果与它们之间的依赖关系")]),e._v(" "),l("li",[e._v("输出资源，根据入口和模块之间的依赖关系，组装Chunk，把 Chunk转换成一个单独的文件加入到输出列表")]),e._v(" "),l("li",[e._v("输出完成：确定好输出内容，根据输出路径把内容写入到文件系统")])])]),e._v(" "),l("li",[l("p",[e._v("实例化 compiler 对象")]),e._v(" "),l("ul",[l("li",[e._v("初始化 NodeEnvironmentPlugin(让compiler具体文件读写能力)")]),e._v(" "),l("li",[e._v("挂载所有 plugins 插件至 compiler 对象身上")]),e._v(" "),l("li",[e._v("挂载所有 webpack 内置的插件（入口）")])])]),e._v(" "),l("li",[l("p",[e._v("compiler.run")])]),e._v(" "),l("li",[l("p",[e._v("compile方法做的事情")])]),e._v(" "),l("li",[l("p",[e._v("完成模块编译操作")])]),e._v(" "),l("li",[l("p",[e._v("webpack 的编写结果和执行过程")])]),e._v(" "),l("li",[l("p",[e._v("webpack 的编译原理")])]),e._v(" "),l("li",[l("p",[e._v("webpack 插件")])]),e._v(" "),l("li",[l("p",[e._v("webpack hook 节点")])])])])}],!1,null,null,null);_.default=i.exports}}]);