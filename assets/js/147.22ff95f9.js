(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{328:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this.$createElement;this._self._c;return this._m(0)}),[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"fiber-相关基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-相关基础知识"}},[s._v("#")]),s._v(" fiber 相关基础知识")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Fiber 出现的原因 ?")]),s._v(" "),a("ul",[a("li",[s._v("javascript 执行引擎和渲染引擎在同一个线程，两者互斥；每帧开头包括样式计算、布局和绘制，屏幕刷新率 1s 60帧, 1000/60, js 执行与渲染的间隔是16.6ms，不让一帧的工作量超过16 ms")]),s._v(" "),a("li",[a("code",[s._v("因为 JavaScript 单线程的特点，每个同步任务不能耗时太长")]),s._v("，不然就会让程序不会对其他输入作出响应，React 的更新过程就是犯了这个禁忌，而 React Fiber 就是要改变现状。 而可以通过分片来破解 JavaScript 中同步操作时间过长的问题。")]),s._v(" "),a("li",[s._v("把一个耗时长的任务分成很多小片，分片运行。")]),s._v(" "),a("li",[a("code",[s._v("React Fiber 把更新过程碎片化")]),s._v("，每执行完一段更新过程，就把控制权交还给 React 负责任务协调的模块，看看有没有其他紧急任务要做，如果没有就继续去更新，如果有紧急任务，那就去做紧急任务。")]),s._v(" "),a("li",[s._v("维护每一个分片的数据结构，就是 Fiber。")]),s._v(" "),a("li",[s._v("之前的 "),a("code",[s._v("stack reconciler")]),s._v(" 处理大状态时由于"),a("code",[s._v("计算和组件树遍历")]),s._v("的消耗容易出现渲染线程挂起，进而页面掉帧，所以有 "),a("code",[s._v("Fiber reconciler")]),s._v(" 所替代。")])])]),s._v(" "),a("li",[a("p",[s._v("哪些任务需要拆分？哪些任务不需要拆分？")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("dom Diff")]),s._v(" 过程中的任务可以进行拆分")]),s._v(" "),a("li",[a("code",[s._v("commit 阶段的工作（patch")]),s._v(" 不可拆分")])])]),s._v(" "),a("li",[a("p",[s._v("如何进行 Fiber 拆分？")]),s._v(" "),a("ul",[a("li",[s._v("实际上就是按虚拟 DOM 节点拆，因为 fiber tree 是根据 vDOM tree 构造出来的，树结构一模一样，只是节点携带的信息有差异。")])])]),s._v(" "),a("li",[a("p",[s._v("如何调度任务")]),s._v(" "),a("ul",[a("li",[s._v("任务可以分为 2 部分："),a("code",[s._v("工作循环")]),s._v(" 与 "),a("code",[s._v("优先级机制")])]),s._v(" "),a("li",[s._v("工作循环是基本的"),a("code",[s._v("任务调度机制")]),s._v("，工作循环中"),a("code",[s._v("每次处理一个任务")]),s._v("（工作单元），处理完毕有一次喘息的机会，此时通过 "),a("code",[s._v("shouldYield")]),s._v(" 函数（idleDeadline.timeRemaining()）判读"),a("code",[s._v("时间是否用完")]),s._v("，用完则把时间还给主线程等待下次 "),a("code",[s._v("requestIdleCallback")]),s._v(" 的唤起，否则继续执行任务。")]),s._v(" "),a("li",[s._v("优先级机制用来处理"),a("code",[s._v("突发事件与优化次序")]),s._v("。 有如下策略：\n"),a("ul",[a("li",[s._v("到 commit 阶段了，提高优先级")]),s._v(" "),a("li",[s._v("高优任务做一半出错了，需要降低一下优先级")]),s._v(" "),a("li",[s._v("抽空关注一下低优任务，别给饿死了")]),s._v(" "),a("li",[s._v("如果对应 DOM 节点此刻不可见，给降到最低优先级")])])])])]),s._v(" "),a("li",[a("p",[s._v("如何中断/断点恢复")]),s._v(" "),a("ul",[a("li",[s._v("中断：检查当前正在处理的工作单元，保存当前成果（firstEffect, lastEffect），修改 tag 标记一下，迅速收尾并再开一个 requestIdleCallback，下次有机会再做")]),s._v(" "),a("li",[s._v("断点恢复：下次再处理到该工作单元时，看 tag 是被打断的任务，接着做未完成的部分或者重做 自然中断（时间耗尽），或优先级中断（高优任务中断），原理相同。")])])]),s._v(" "),a("li",[a("p",[s._v("如何收集任务结果")]),s._v(" "),a("ul",[a("li",[s._v("每个节点更新结束时向上归并 effect list 来收集任务结果，reconciliation 结束后，根节点的 effect list 里记录了包括 DOM change 在内的所有 side effect。")]),s._v(" "),a("li",[s._v("requestIdleCallback 让开发者在主事件循环中执行后台或低优先级的任务,不会对动画和用户交互等关键事件产生影响。")])])]),s._v(" "),a("li",[a("p",[s._v("fiber 是模拟了 JS 的调用栈实现的")]),s._v(" "),a("ul",[a("li",[s._v("Fiber 在 React 生成的 Virtual Dom 基础上增加的一层链表数据结构，把递归遍历转成循环遍历。配合 requestIdleCallback API , 实现任务拆分、中断与恢复。")]),s._v(" "),a("li",[s._v("JavaScript 用一个栈来管理执行上下文，这个栈中的每一项又包含一个链表。")]),s._v(" "),a("li",[s._v("当函数调用时，会入栈一个新的执行上下文，函数调用结束时，执行上下文被出栈。")])])]),s._v(" "),a("li",[a("p",[s._v("fiber 架构：")]),s._v(" "),a("ul",[a("li",[s._v("循环条件：利用 requestIdeCallback 空闲时间递减.")]),s._v(" "),a("li",[s._v("遍历过程：利用链表，找孩子找兄弟找父亲.")])])]),s._v(" "),a("li",[a("p",[s._v("fiber 是什么")]),s._v(" "),a("ul",[a("li",[s._v("Fiber 是一种数据结构，深度优先遍历 虚拟 DOM 节点得到的的链表关系")]),s._v(" "),a("li",[s._v("是一个工作单元，每个组件实例和每个DOM节点的 "),a("code",[s._v("抽象表示都是一个工作单元")])]),s._v(" "),a("li",[s._v("是一个virtual stack frame，实现了自己的调用栈，它以链表的形式遍历组件树，可以灵活的暂停、继续和丢弃执行的任务。")]),s._v(" "),a("li",[a("code",[s._v("Fiber 按照虚拟DOM拆分")]),s._v("，因为fiber tree是根据Virtual DOM tree 构建出来的，结构上是一样的，只是节点携带的信息不一样。")])])]),s._v(" "),a("li",[a("p",[s._v("fiber 执行的大致过程：调度、调和、提交，")]),s._v(" "),a("ul",[a("li",[s._v("fiberRoot 保存全局调度信息，链表的起点")]),s._v(" "),a("li",[s._v("scheduler 选择优先级高的任务进入 reconciler")]),s._v(" "),a("li",[s._v("reconciler 计算变更内容")]),s._v(" "),a("li",[s._v("react-dom 把变更的内容渲染到页面上")]),s._v(" "),a("li",[s._v("DOM Diff 时 完成 Reconciliation（协调render）：生成Fiber树，得出需要更新的节点信息即找出所有变更(Effect)。这一步是一个渐进的过程，可以被打断。")]),s._v(" "),a("li",[s._v("Commit（提交）阶段：即需要处理的副作用，将需要更新的节点一次过批量更新，这个过程不能被打断。")]),s._v(" "),a("li",[s._v("具体构建过程\n"),a("ul",[a("li",[a("code",[s._v("Fiber Reconciler在 Diff")]),s._v(" 计算的时候，会"),a("code",[s._v("生成一棵 Fiber 树")]),s._v("，是根据Virtual DOM tree 构建出来的，增加了"),a("code",[s._v("额外信息")]),s._v("，本质上也是"),a("code",[s._v("一个链表")])]),s._v(" "),a("li",[a("code",[s._v("Fiber树在首次渲染的时候会一次生成")]),s._v("。在"),a("code",[s._v("后续需要Diff")]),s._v("的时候，会根据已有 Fiber 树和最新 Virtual DOM 的信息，"),a("code",[s._v("生成一棵新的树")]),s._v("，这颗新树"),a("code",[s._v("每生成一个新的节点")]),s._v("，都会将控制权交回给主线程，去检查有没有优先级更高的任务需要执行。如果没有，则继续构建树的过程")]),s._v(" "),a("li",[s._v("在构造Fiber树的过程中，Fiber Reconciler 会将"),a("code",[s._v("需要更新的节点信息保存在 Effect List")]),s._v(" 当中，在阶段二执行的时候，会批量更新相应的节点。")])])])])]),s._v(" "),a("li",[a("p",[s._v("Fiber reconciliation的工作循环 过程？")]),s._v(" "),a("ul",[a("li",[s._v("找到根节点优先级最高的"),a("code",[s._v("workInProgress tree")]),s._v("，取其待处理的节点（代表组件或DOM节点）")]),s._v(" "),a("li",[s._v("检查当前节点是否需要更新，不需要的话，直接到4")]),s._v(" "),a("li",[s._v("标记一下（打个tag），更新自己（组件更新props，context等，DOM节点记下DOM change），进行reconcileChildren并返回workInProgress.child")]),s._v(" "),a("li",[s._v("不存在workInProgress.child,证明是叶子节点，向上收集effect")]),s._v(" "),a("li",[s._v("把child或者sibling当做nextUnitWork,进入下一个工作循环。如果回到了workInProgress tree的根节点，则工作循环结束")]),s._v(" "),a("li",[s._v("进入commit阶段")])])]),s._v(" "),a("li",[a("p",[s._v("Fiber工作阶段phase")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("diff render和reconciliation 主要是构建workInProgress tree")]),s._v("，其实是diff过程")]),s._v(" "),a("li",[s._v("complete diffProperties,"),a("code",[s._v("标记tag，收集effect")])]),s._v(" "),a("li",[s._v("commit 提交阶段,应用更新")]),s._v(" "),a("li",[s._v("调度器（Scheduler）来负责进行任务分配")])])]),s._v(" "),a("li",[a("p",[s._v("双缓冲池技术(复用内部对象，节省内存分配、GC 的视觉开销)")]),s._v(" "),a("ul",[a("li",[s._v("FiberRoot底下的所有节点，都会在算法过程中，尝试创建自己的“镜像”。")]),s._v(" "),a("li",[s._v("workInProgress tree是reconcile过程中从fiber tree建立的当前进度快照，所有工作都是在这颗树上进行，用于计算更新，完成reconciliation过程。")]),s._v(" "),a("li",[s._v("以fiber tree为主，workInProgress tree为辅")]),s._v(" "),a("li",[s._v("双缓冲具体指的是workInProgress tree构造完毕，得到的就是新的fiber tree，然后喜新厌旧（把current指针指向workInProgress tree，丢掉旧的fiber tree）就好了")]),s._v(" "),a("li",[s._v("在Fiber结构中增加一个alternate字段标识上一次渲染好的Fiber树，下次渲染时可复用")]),s._v(" "),a("li",[a("s",[s._v("每个fiber上都有个alternate属性，也指向一个fiber，创建workInProgress节点时优先取alternate，没有的话就创建一个?")])]),s._v(" "),a("li",[a("s",[s._v("fiber与workInProgress互相持有引用，“喜新厌旧”之后，旧fiber就作为新fiber更新的预留空间，达到复用fiber实例的目的")])])])]),s._v(" "),a("li",[a("p",[s._v("Fiber的特点")]),s._v(" "),a("ul",[a("li",[s._v("暂停工作，并在之后可以返回再次开始；")]),s._v(" "),a("li",[s._v("可以为不同类型的工作设置优先级；")]),s._v(" "),a("li",[s._v("复用之前已经完成的工作；")]),s._v(" "),a("li",[s._v("中止已经不再需要的工作。")]),s._v(" "),a("li",[s._v("增量渲染（把渲染任务拆分成块，匀到多帧）")]),s._v(" "),a("li",[s._v("更新时能够暂停，终止，复用渲染任务")]),s._v(" "),a("li",[s._v("给不同类型的更新赋予优先级")]),s._v(" "),a("li",[s._v("并发方面新的基础能力")])])]),s._v(" "),a("li",[a("p",[s._v("优先级策略：紧急的事件允许插队")]),s._v(" "),a("ul",[a("li",[s._v("synchronous 与之前的Stack reconciler操作一样，同步执行；首屏（首次渲染）用，要求尽量快，不管会不会阻塞UI线程")]),s._v(" "),a("li",[s._v("task 在next tick之前执行----requestIdleCallback回调执行的；")]),s._v(" "),a("li",[s._v("animation 下一帧之前执行；通过requestAnimationFrame来调度，这样在下一帧就能立即开始动画过程")]),s._v(" "),a("li",[s._v("high 在不久的将来立即执行----requestIdleCallback回调执行的；")]),s._v(" "),a("li",[s._v("low 稍微延迟（100-200ms）执行也没关系----requestIdleCallback回调执行的；")]),s._v(" "),a("li",[s._v("offscreen 下一次render时或scroll时才执行----看不见的")])])]),s._v(" "),a("li",[a("p",[s._v("生命周期函数怎么执行？次序的保证？")])]),s._v(" "),a("li",[a("p",[s._v("低优先级饿死现象----尽量复用已完成的操作（reusing work where it can）来缓解")])]),s._v(" "),a("li",[a("p",[s._v("如何实现 Fiber 架构下的 组件渲染 和 副作用收集提交？")]),s._v(" "),a("ul",[a("li",[s._v("执行的收集顺序类似于二叉树的先序遍历")]),s._v(" "),a("li",[s._v("完成的收集顺序类似于二叉树的后序遍历")])])]),s._v(" "),a("li",[a("p",[s._v("React 的 Virtual DOM、Reconciler、Renderer的任务划分")]),s._v(" "),a("ul",[a("li",[s._v("Virtual DOM 层，描述页面长什么样。")]),s._v(" "),a("li",[s._v("Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等。")]),s._v(" "),a("li",[s._v("Renderer 层，根据不同的平台，渲染出相应的页面")])])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主要 fiber 属性,")]),s._v("\nrootFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 父亲")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("sibling")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//兄弟")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("child")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 大儿子")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("index")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("effectTag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("nextEffect")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("lastEffect")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("firstEffect")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xx\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// expiration Time 优先级：0 noWork, 1 never, async 毫秒数越小，优先级越高")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// synchronous，与之前的Stack Reconciler操作一样，同步执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// task，在next tick之前执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// animation，下一帧之前执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// high，在不久的将来立即执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// low，稍微延迟执行也没关系")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// offscreen，下一次render时或scroll时才执行")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// updateQueue")]),s._v("\nreconciler\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" WorkTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("pendingProps")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" mixed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("mode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" TypeOfMode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作为静态数据结构的属性")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fiber 对应组件的类型 Function/Class/Host...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 大部分情况同 type，某些情况不同，比如 FunctionComponent 使用 React.memo 包裹")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对于 FunctionComponent，指函数本身，对于 ClassComponent，指 class，对于 HostComponent，指 DOM 节点 tagName")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fiber 对应的真实 DOM 节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stateNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用于连接其他 Fiber 节点形成 Fiber 树")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作为动态的工作单元的属性")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存本次更新造成的状态改变相关信息")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pendingProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memoizedProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("updateQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memoizedState "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dependencies "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存本次更新会造成的 DOM 操作")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("firstEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调度优先级相关")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向该 fiber 在另一次更新时对应的 fiber")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])])])}],!1,null,null,null);t.default=n.exports}}]);