(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{87:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"javascript的隐式转换"}},[t._v("javascript的隐式转换")]),s("ol",[s("li",[t._v("原始基础类型：Undefined、 Null、 String、 Number、 Boolean、 Symbol、Object")]),s("li",[t._v("JS内置对象：Date, Array, Math, Number, Boolean, String, Array, RegExp, Function。")]),s("li",[t._v("隐式中涉及的三种转换：")])]),s("ul",[s("li",[t._v("值转换为原始值 ，ToPrimitive(input, PreferredType)\n"),s("ul",[s("li",[t._v("PreferredType被标记为Number\n"),s("ol",[s("li",[t._v("如果输入值是原始值 ，则直接返回")]),s("li",[t._v("否则如果输入的值是一个对象，则调用对象的valueOf()方法；如果valueof()返回的是一个原始值，则返回这个原始值。")]),s("li",[t._v("否则调用对象toString()方法，如果返回的是一个原始值，则返回原始值；否则抛出TypeError异常")])])]),s("li",[t._v("PreferredType被标记为String\n"),s("ol",[s("li",[t._v("如果输入值是原始值 ，则直接返回")]),s("li",[t._v("否则调用对象的toString()方法；如果toString()返回的是一个原始值，则返回这个原始值。")]),s("li",[t._v("否则输入的值是一个对象，则调用该对象的valueOf()，如果返回的是一个原始值，则返回原始值；否则抛出TypeError异常")])])]),s("li",[t._v("无参数PreferredType时\n"),s("ol",[s("li",[t._v("该对象为Date类型，则PreferredType被设置为String")]),s("li",[t._v("否则PreferredType被设置为Number")])])])])]),s("li",[t._v("值转换为数字，ToNumber()")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("参数")]),s("th",{staticStyle:{"text-align":"center"}},[t._v("结果")])])]),s("tbody",[s("tr",[s("td",[t._v("undefined")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("NaN")])]),s("tr",[s("td",[t._v("null")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("+0")])]),s("tr",[s("td",[t._v("布尔值")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("true转换1，false转换为+0")])]),s("tr",[s("td",[t._v("数字")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("无须转换")])]),s("tr",[s("td",[t._v("字符串")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("有字符串解析为数字，例如：‘324’转换为324，‘qwer’转换为NaN")])]),s("tr",[s("td",[t._v("对象(obj)")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("先进行 ToPrimitive(obj, Number)转换得到原始值，在进行ToNumber转换为数字")])])])]),s("ul",[s("li",[t._v("值转换为字符串，ToString()")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("参数")]),s("th",{staticStyle:{"text-align":"center"}},[t._v("结果")])])]),s("tbody",[s("tr",[s("td",[t._v("undefined")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("'undefined'")])]),s("tr",[s("td",[t._v("null")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("'null'")])]),s("tr",[s("td",[t._v("布尔值")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("转换为'true' 或 'false'")])]),s("tr",[s("td",[t._v("数字")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("数字转换字符串，比如：1.765转为'1.765'")])]),s("tr",[s("td",[t._v("字符串")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("无须转换")])]),s("tr",[s("td",[t._v("对象(obj)")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("先进行 ToPrimitive(obj, String)转换得到原始值，在进行ToString转换为字符串")])])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[t._v("valueOf()与toString()是Object.prototype上的属性，故所有对象都拥有。")])]),s("li",[s("p",[t._v("例：")])])]),s("ul",[s("li",[t._v("Number, Boolean, String这三种构造函数生成基础值的对象形式")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("  "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'123'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  num"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("String")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'12df'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// '12df'")]),t._v("\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bool "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'fd'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  bool"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),s("ul",[s("li",[t._v("Date特殊对象")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 1515143895500")]),t._v("\n")])]),s("ul",[s("li",[t._v("除此之外返回的都是this，即对象本身")])]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("toString()方法")])]),s("ul",[s("li",[t._v("Number、Boolean、String、Array、Date、RegExp、Function这几种构造函数生成的对象，通过toString转换后会变成相应的字符串的形式，因为这些构造函数上封装了自己的toString方法。如："),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Number"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nBoolean"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nString"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nArray"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nDate"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nRegExp"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nFunction"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'toString'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'123sd'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 'NaN'")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("String")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'12df'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// '12df'")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bool "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'fd'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbool"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 'true'")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// '1,2'")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nd"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('// "Wed Oct 11 2017 08:00:00 GMT+0800 (中国标准时间)"')]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfunc"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('// "function () {}"')]),t._v("\n")])])]),s("li",[t._v("除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型，(有问题欢迎告知)，都是继承的Object.prototype.toString方法。"),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('// "[object Object]"')]),t._v("\n\nMath"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('// "[object Math]"')]),t._v("\n")])])])]),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),s("p",[t._v("故：从valueOf()与toString()函数对对象的转换可知，对于ToPrimitive(input, preferredType)，preferredType没有设定时，除Date被设置为String类型外，其他会被设置为Number；")]),s("p",[t._v("因为valueOf将Number、String、Boolean基础类型的对象类型转换为基础类型，Data转换为毫秒数，其他返回为对象本身；而toString会将所有对象转换为字符串，显然valueOf转换更合理些")]),s("p",[t._v("因此先将PreferredType设置为Number类型，进行valueOf转换；而Date类型的对象，没有设定PreferredType时，默认设置为String")])]),s("ol",{attrs:{start:"7"}},[s("li",[t._v("例子分析")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('- ({} + {}) = ?\n  两个对象的值进行+运算符，肯定要先进行隐式转换为原始类型才能进行计算。\n  1、进行ToPrimitive转换，由于没有指定PreferredType类型，{}会使默认值为Number，进行ToPrimitive(input, Number)运算。\n  2、所以会执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。\n  3、继续执行toString方法，({}).toString(),返回"[object Object]"，是原始值。\n  故得到最终的结果，"[object Object]" + "[object Object]" = "[object Object][object Object]"\n\n- 2 * {} = ?\n  1、首先*运算符只能对number类型进行运算，故第一步就是对{}进行ToNumber类型转换。\n  2、由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。\n  3、所以会执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。\n  4、继续执行toString方法，({}).toString(),返回"[object Object]"，是原始值。\n  5、转换为原始值后再进行ToNumber运算，"[object Object]"就转换为NaN。\n  故最终的结果为 2 * NaN = NaN\n\n')])]),s("ol",{attrs:{start:"8"}},[s("li",[t._v("== 运算符隐式转换")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("比较运算 x==y, 其中 x 和 y 是值，返回 true 或者 false。这样的比较按如下方式进行：\n1、若 Type(x) 与 Type(y) 相同， 则\n\n    1* 若 Type(x) 与 Type(y)为 Undefined， 返回 true。\n    2* 若 Type(x) 与 Type(y)为 Null， 返回 true。\n    3* 若 Type(x) 与 Type(y)为 Number， 则\n\n        (1)、若 x 为 NaN， 返回 false。\n        (2)、若 y 为 NaN， 返回 false。\n        (3)、若 x 与 y 为相等数值， 返回 true。\n        (4)、若 x 为 +0 且 y 为 −0， 返回 true。\n        (5)、若 x 为 −0 且 y 为 +0， 返回 true。\n        (6)、返回 false。\n\n    4* 若 Type(x) 与 Type(y) 为 String, 则当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true。 否则， 返回 false。\n    5* 若 Type(x) 与 Type(y) 为 Boolean, 当 x 和 y 为同为 true 或者同为 false 时返回 true。 否则， 返回 false。\n    6*  当 x 和 y 为引用同一对象时返回 true。否则，返回 false。\n\n2、若 x 为 null 且 y 为 undefined， 返回 true。\n3、若 x 为 undefined 且 y 为 null， 返回 true。\n4、若 Type(x) 为 Number 且 Type(y) 为 String，返回比较 x == ToNumber(y) 的结果。\n5、若 Type(x) 为 String 且 Type(y) 为 Number，返回比较 ToNumber(x) == y 的结果。\n6、若 Type(x) 为 Boolean， 返回比较 ToNumber(x) == y 的结果。\n7、若 Type(y) 为 Boolean， 返回比较 x == ToNumber(y) 的结果。\n8、若 Type(x) 为 String 或 Number，且 Type(y) 为 Object，返回比较 x == ToPrimitive(y) 的结果。\n9、若 Type(x) 为 Object 且 Type(y) 为 String 或 Number， 返回比较 ToPrimitive(x) == y 的结果。\n10、返回 false。\n")])]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("ul",[s("li",[t._v("x、y类型相同时：\n"),s("ol",[s("li",[t._v("Number类型时，NaN与NaN不相待")]),s("li",[t._v("对象时，需要是引用同一个对象")])])]),s("li",[t._v("和类型不相同时：\n"),s("ol",[s("li",[t._v("x,y 为null、undefined两者中一个则相等")]),s("li",[t._v("x、y为Number和String类型时，则转换为Number类型比较。")]),s("li",[t._v("有Boolean类型时，Boolean转化为Number类型比较。")]),s("li",[t._v("一个Object类型，一个String或Number类型，将Object类型进行原始转换后，按上面流程进行原始值比较。")])])])])]),s("ol",{attrs:{start:"9"}},[s("li",[t._v("例子分析：")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var a = {\n  valueOf: function () {\n     return 1;\n  },\n  toString: function () {\n     return '123'\n  }\n}\ntrue == a // true;\n首先，x与y类型不同，x为boolean类型，则进行ToNumber转换为1,为number类型。\n接着，x为number，y为object类型，对y进行原始转换，ToPrimitive(a, ?),没有指定转换类型，默认number类型。\n而后，ToPrimitive(a, Number)首先调用valueOf方法，返回1，得到原始类型1。\n最后 1 == 1， 返回true。\n\n[] == !{}\n1、! 运算符优先级高于==，故先进行！运算。\n2、!{}运算结果为false，结果变成 [] == false比较。\n3、根据上面第7条，等式右边y = ToNumber(false) = 0。结果变成 [] == 0。\n4、按照上面第9条，比较变成ToPrimitive([]) == 0。\n    按照上面规则进行原始值转换，[]会先调用valueOf函数，返回this。\n   不是原始值，继续调用toString方法，x = [].toString() = ''。\n   故结果为 '' == 0比较。\n5、根据上面第5条，等式左边x = ToNumber('') = 0。\n   所以结果变为： 0 == 0，返回true，比较结束。\n\n试分析该段代码\nconst a = {\n  i: 1,\n  toString: function () {\n    return a.i++;\n  }\n}\nif (a == 1 && a == 2 && a == 3) {\n  console.log('hello world!');\n}\n")])])])}],!1,null,null,null);n.default=e.exports}}]);