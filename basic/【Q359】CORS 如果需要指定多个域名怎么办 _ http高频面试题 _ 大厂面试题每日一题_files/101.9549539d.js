(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{522:function(t,s,e){"use strict";e.r(s);var a=e(54),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"简述-http-的缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简述-http-的缓存机制"}},[t._v("#")]),t._v(" 简述 http 的缓存机制")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Issue")]),t._v(" "),e("p",[t._v("欢迎在 Gtihub Issue 中回答此问题: "),e("a",{attrs:{href:"https://github.com/shfshanyue/Daily-Question/issues/80",target:"_blank",rel:"noopener noreferrer"}},[t._v("Issue 80"),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Author")]),t._v(" "),e("p",[t._v("回答者: "),e("a",{attrs:{href:"https://github.com/xjx-me",target:"_blank",rel:"noopener noreferrer"}},[t._v("xjx-me"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("强缓存 协商缓存")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Author")]),t._v(" "),e("p",[t._v("回答者: "),e("a",{attrs:{href:"https://github.com/shfshanyue",target:"_blank",rel:"noopener noreferrer"}},[t._v("shfshanyue"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("Http 缓存分为以下两种，两者都是通过 HTTP 响应头控制缓存")]),t._v(" "),e("ol",[e("li",[t._v("强制缓存")]),t._v(" "),e("li",[t._v("协商缓存")])]),t._v(" "),e("h2",{attrs:{id:"强制缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),e("p",[t._v("再次请求时无需再向服务器发送请求")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("              client         server\nGET /a.ab389z.js -------"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n                      "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("------- "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("再也不会发请求"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("与之相关的 Response Headers 有以下几个")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("Expires")])]),t._v(" "),e("p",[t._v("这个头部也是丧心病狂：使用绝对时间，且有固定的格式 "),e("a",{attrs:{href:"https://tools.ietf.org/html/rfc822#section-5.1",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tools.ietf.org/html/rfc822#section-5.1"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("Expires: Mon, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" Oct "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(":11:12 GMT\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Cache-Control")]),t._v("，具有强大的缓存控制能力")]),t._v(" "),e("p",[t._v("常用的有以下两个")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("no-cache")]),t._v("，每次请求需要校验服务器资源的新鲜度")]),t._v(" "),e("li",[e("code",[t._v("max-age=31536000")]),t._v("，浏览器在一年内都不需要向服务器请求资源")])])])]),t._v(" "),e("h2",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),e("p",[t._v("再次请求时，需要向服务器校验新鲜度，如果资源是新鲜的，返回 304，从浏览器获取资源")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("           client         server\nGET /a.js   -----------"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n                   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("----------- "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK\nGET /a.js   -----------"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n                   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("----------- "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),t._v(" Not Modified\n")])])]),e("p",[t._v("与之相关的 Request/Response Headers 有以下几个")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Last-Modified")]),t._v("/"),e("code",[t._v("If-Modified-Since")])]),t._v(" "),e("li",[e("code",[t._v("Etag")]),t._v("/"),e("code",[t._v("If-None-Match")])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Author")]),t._v(" "),e("p",[t._v("回答者: "),e("a",{attrs:{href:"https://github.com/Harry3014",target:"_blank",rel:"noopener noreferrer"}},[t._v("Harry3014"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("今天在看这个问题的时候，发现一个关于强制缓存的意外情况。在刷新页面时，有的浏览器会重新验证缓存资源的新鲜度，有的不会。")]),t._v(" "),e("p",[t._v("假设第一次请求资源的 Response Heades 包含下列强制缓存信息")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Date: Tue, 19 Jan 2021 08:37:05 GMT\nExpires: Tue, 26 Jan 2021 08:37:05 GMT\n")])])]),e("p",[t._v("在有效期内，按照强制缓存的概念解释，再次请求资源时，不会发送请求，直接返回 200。\n但是在 firefox 中(使用版本：84.0.2)，Request Headers 中包含"),e("code",[t._v("If-Modified-Since")]),t._v("头部，所以仍然会发送请求，返回 304。\n在 chrome 中(使用版本：87.0.4280.141)，不会发送请求，会直接使用缓存的资源，返回 200。")]),t._v(" "),e("p",[t._v("在 stackoverflow 找到了一些关于这个问题的回答https://stackoverflow.com/questions/45829055/why-doesnt-chrome-re-validate-in-memory-cache-when-doing-a-normal-reload/57281076#57281076")])])}),[],!1,null,null,null);s.default=r.exports}}]);